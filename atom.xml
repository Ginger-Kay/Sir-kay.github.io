<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sir-kay</title>
  
  <subtitle>Think Once, Debug More. Think More, Debug Once.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-10T13:43:55.998Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sir-kay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeforces 1132D Stressful Training 题解</title>
    <link href="http://yoursite.com/2019/11/10/Codeforces-1132D-Stressful-Training-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/11/10/Codeforces-1132D-Stressful-Training-题解/</id>
    <published>2019-11-10T13:02:07.000Z</published>
    <updated>2019-11-10T13:43:55.998Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1132D-Stressful-Training-题解"><a href="#Codeforces-1132D-Stressful-Training-题解" class="headerlink" title="Codeforces 1132D Stressful Training 题解"></a><a href="http://codeforces.com/contest/1132/problem/D" target="_blank" rel="noopener">Codeforces 1132D Stressful Training</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$n$个学生打比赛，第$i$个学生的电脑的初始电量为$a_i$，每分钟使用的电量为$b_i$(即如果在一分钟的开始有$c$格电量，在下一分钟的开始，电量变为$c-b_i$)。整场比赛持续$k$分钟($1\le n\le 2\times10^5,1\le k\le 2\times10^5,1\le a_i\le 10^{12},1\le b_i\le 10^7$)。</p><p>在比赛的开始时有<strong>一个</strong>充电器。你可以选择充电器的输出电量$x$，$x$为一个非负整数，且以后不能更改。<strong>在每一分钟的开始</strong>，你可以把充电器插在任意一个学生的电脑上(如果一个电脑的用电量为$b_i$，插入了充电器后每分钟会消耗$b_i-x$格电)。每个学生的电脑的电量没有上限。充电器在一个时刻最多给一台电脑充电。</p><p>一个学生成功地完成比赛如果在比赛的过程中他的电脑的电量总是一个非负数。比赛结束时电脑的电量无关紧要。</p><p>输出充电器最小的输出电量，使得所有的学生都可以成功地完成比赛，或者输出$-1$表示不可能。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑二分 充电器的电量。</p><p><u>如果充电器的电量为$x$，$x=y$时可行，则$x=y+1$时一定可行，而$x=y-1$时则不一定。</u></p><p>二分下限为$0$，上限为$2\times10^{12}$就够了(如果您不想算，设为$10^{18}$也可以，<del>欺负log</del>)。</p><p><code>check</code>函数考虑贪心：每次选出当前最快要没电的电脑，给它充一分钟电。</p><p>显然，如果一台电脑当前电量为$x$，每分钟消耗的电量为$y$，则给它充电使得它的电量非负的最后时刻为$\left\lfloor\frac{x}{y}\right\rfloor+1$。使用优先队列维护即可。</p><p>这样<code>check</code>函数的时间复杂度为$O((n+k)\times\log n)$，总共为$O(\log\text{ans}\times(n+k)\times \log n)$。有点危险：如果优先队列里维护的是<code>pair&lt;long long,pair&lt;long long&gt; &gt;</code>可能会<code>TLE 50</code>，改为结构体擦边<code>AC</code>。</p><p>考虑优化：</p><p>开$k$个<code>vector</code>，其中第$i$个维护哪些电脑能支撑到的最后时刻为$i$。其它思路同上。</p><p>这样<code>check</code>函数的时间复杂度为$O(n+k)$，总共为$O(\log\text{ans}\times(n+k))$。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><ul><li><p>未优化版本</p><ul><li><code>pair&lt;long long,pair&lt;long long&gt; &gt;</code>：<img src="https://i.loli.net/2019/11/10/IaBdFWKTXr4qweD.png" alt="image.png"></li><li><code>struct</code>：<img src="https://i.loli.net/2019/11/10/HsBi2AePfbc3Zhm.png" alt="image.png"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL res=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> res%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL a[maxn],b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">LL x,y,r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(stu S) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> r&gt;S.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;stu&gt; q;</span><br><span class="line">rep1(i,n) q.push(&#123;a[i],b[i],a[i]/b[i]&#125;);</span><br><span class="line"></span><br><span class="line">rep1(i,m)</span><br><span class="line">&#123;</span><br><span class="line">LL x=q.top().x,y=q.top().y,r=q.top().r+<span class="number">1</span>;q.pop();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(r&lt;i) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(r&gt;=m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">x+=mid;</span><br><span class="line">q.push(&#123;x,y,x/y&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line"></span><br><span class="line">LL l=<span class="number">0</span>,r=<span class="number">1e18</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">LL mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check(r)) PF(<span class="string">"%lld"</span>,r); <span class="keyword">else</span> PF(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>优化版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL res=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> res%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL a[maxn],b[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;LL,LL&gt; &gt; stu[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i,m+<span class="number">1</span>) stu[i].clear();</span><br><span class="line">rep1(i,n) <span class="keyword">if</span>(a[i]/b[i]+<span class="number">1</span>&lt;=m) stu[a[i]/b[i]+<span class="number">1</span>].push_back(&#123;a[i],b[i]&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">rep1(i,m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(stu[k].empty()) k++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k&lt;i) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(k&gt;=m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">LL x=stu[k].back().fs+mid,y=stu[k].back().sc;stu[k].pop_back();</span><br><span class="line"><span class="keyword">if</span>(x/y+<span class="number">1</span>&lt;=m) stu[x/y+<span class="number">1</span>].push_back(&#123;x,y&#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line"></span><br><span class="line">LL l=<span class="number">0</span>,r=<span class="number">1e18</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">LL mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(check(r)) PF(<span class="string">"%lld"</span>,r); <span class="keyword">else</span> PF(<span class="string">"-1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1132D-Stressful-Training-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1132D-Stressful-Training-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1132D Stressful Training 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/1132/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1132D Stressful Training&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;有$n$个学生打比赛，第$i$个学生的电脑的初始电量为$a_i$，每分钟使用的电量为$b_i$(即如果在一分钟的开始有$c$格电量，在下一分钟的开始，电量变为$c-b_i$)。整场比赛持续$k$分钟($1\le n\le 2\times10^5,1\le k\le 2\times10^5,1\le a_i\le 10^{12},1\le b_i\le 10^7$)。&lt;/p&gt;
&lt;p&gt;在比赛的开始时有&lt;strong&gt;一个&lt;/strong&gt;充电器。你可以选择充电器的输出电量$x$，$x$为一个非负整数，且以后不能更改。&lt;strong&gt;在每一分钟的开始&lt;/strong&gt;，你可以把充电器插在任意一个学生的电脑上(如果一个电脑的用电量为$b_i$，插入了充电器后每分钟会消耗$b_i-x$格电)。每个学生的电脑的电量没有上限。充电器在一个时刻最多给一台电脑充电。&lt;/p&gt;
&lt;p&gt;一个学生成功地完成比赛如果在比赛的过程中他的电脑的电量总是一个非负数。比赛结束时电脑的电量无关紧要。&lt;/p&gt;
&lt;p&gt;输出充电器最小的输出电量，使得所有的学生都可以成功地完成比赛，或者输出$-1$表示不可能。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1249D Maximum Weight Subset 题解</title>
    <link href="http://yoursite.com/2019/11/10/Codeforces-1249D-Maximum-Weight-Subset-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/11/10/Codeforces-1249D-Maximum-Weight-Subset-题解/</id>
    <published>2019-11-10T12:25:54.000Z</published>
    <updated>2019-11-10T13:03:02.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1249D-Maximum-Weight-Subset-题解"><a href="#Codeforces-1249D-Maximum-Weight-Subset-题解" class="headerlink" title="Codeforces 1249D Maximum Weight Subset 题解"></a><a href="http://codeforces.com/contest/1249/problem/F" target="_blank" rel="noopener">Codeforces 1249D Maximum Weight Subset</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一棵有$n$个结点的树和$k$，编号为$1\sim n$，结点$i$的权值为$a_i$ ($1\le n,k\le200,1\le a_i\le10^5$)。</p><p>现在请你选出一些节点，使得这些节点的权值和最大 并且 这些节点中任意两个节点的距离都$&gt;k$。 </p><p> 并输出这个最大的权值。 </p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑树形DP。</p><p>以任意一个结点为根。设$dp(i,j)$表示在以结点$i$为根的子树内，选中结点中 离$i$最近的那个结点到$i$的距离<strong>大于等于</strong>$j$，权值最大的 选中结点的点集 的权值。</p><p>考虑以$u$为根的子树内，如何转移：</p><p>设$v$是$u$的任意一个儿子。</p><ul><li>$dp(u,0)=a_u+\sum dp(v,k)$。</li><li>$dp(u,i)=\max\{dp(v,i-1)+\sum\limits_{w \text{is a son of} u,v\ne w} dp(w,\max(i-1,k-i)) \}$。</li></ul><p>转移完后还要对$dp(u)$求一遍后缀最大值。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL res=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> res%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">210</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn],dp[maxn][maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dp[u][<span class="number">0</span>]=a[u];</span><br><span class="line"></span><br><span class="line">repV(v,e[u]) <span class="keyword">if</span>(v!=fa)</span><br><span class="line">&#123;</span><br><span class="line">dfs(v,u);</span><br><span class="line">dp[u][<span class="number">0</span>]+=dp[v][m];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep1(i,n)</span><br><span class="line">&#123;</span><br><span class="line">repV(v,e[u]) <span class="keyword">if</span>(v!=fa)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> res=dp[v][i<span class="number">-1</span>];</span><br><span class="line">repV(w,e[u]) <span class="keyword">if</span>(w!=fa&amp;&amp;w!=v) res+=dp[w][max(i<span class="number">-1</span>,m-i)];</span><br><span class="line">dp[u][i]=max(dp[u][i],res);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repd(i,n) dp[u][i]=max(dp[u][i],dp[u][i+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">rep1(i,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;SF(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">e[v].push_back(u);</span><br><span class="line">e[u].push_back(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,dp[<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1249D-Maximum-Weight-Subset-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1249D-Maximum-Weight-Subset-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1249D Maximum Weight Subset 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/1249/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1249D Maximum Weight Subset&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一棵有$n$个结点的树和$k$，编号为$1\sim n$，结点$i$的权值为$a_i$ ($1\le n,k\le200,1\le a_i\le10^5$)。&lt;/p&gt;
&lt;p&gt;现在请你选出一些节点，使得这些节点的权值和最大 并且 这些节点中任意两个节点的距离都$&amp;gt;k$。 &lt;/p&gt;
&lt;p&gt; 并输出这个最大的权值。 &lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="树形DP" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 903D Almost Difference 题解</title>
    <link href="http://yoursite.com/2019/11/08/Codeforces-903D-Almost-Difference-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/11/08/Codeforces-903D-Almost-Difference-题解/</id>
    <published>2019-11-08T03:33:35.000Z</published>
    <updated>2019-11-08T04:24:38.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-903D-Almost-Difference-题解"><a href="#Codeforces-903D-Almost-Difference-题解" class="headerlink" title="Codeforces 903D Almost Difference 题解"></a><a href="https://codeforces.com/contest/903/problem/D" target="_blank" rel="noopener">Codeforces 903D Almost Difference</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义一个方程</p><script type="math/tex; mode=display">d(x,y)=\begin{cases}y-x,\quad &\text{if}\ |x-y|>1 \\0,&\text{if}\ |x-y|\le1\end{cases}</script><p>给定一个有$n$个数的数组$a (1\le n\le2\times10^5,1\le a_i\le10^9)$，求出$\sum\limits_{1\le i\le j\le n}d(a_i,a_j)$。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设$s_i$表示$\sum\limits_{j=1}^{i}a_j$，可以用前缀和求出。</p><p>令$ans=\sum\limits_{i=1}^n(i\times a_i-s_i)$，这样就求出了不考虑$d(x,y)=0$的部分。</p><p>在考虑$d(x,y)=0$的时候，用<code>map</code>维护每个值出现的次数，加上或减去差为$1$的数的个数即可。</p><p>最坑的地方：会爆<code>long long</code>，可以用<code>double</code>，不输出小数部分即可。</p><p>然后发现会<code>WA 13</code>，用<code>long double</code>后<code>AC</code>。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL res=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> res%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL sum;</span><br><span class="line">LD ans;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">rep1(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;SF(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"></span><br><span class="line">sum+=x;</span><br><span class="line">ans+=<span class="number">1l</span>l*x*i-sum-cnt[x<span class="number">-1</span>]+cnt[x+<span class="number">1</span>];</span><br><span class="line">cnt[x]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%.0Lf"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-903D-Almost-Difference-题解&quot;&gt;&lt;a href=&quot;#Codeforces-903D-Almost-Difference-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 903D Almost Difference 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/903/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 903D Almost Difference&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;定义一个方程&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
d(x,y)=
\begin{cases}
y-x,\quad &amp;\text{if}\ |x-y|&gt;1 \\
0,&amp;\text{if}\ |x-y|\le1
\end{cases}&lt;/script&gt;&lt;p&gt;给定一个有$n$个数的数组$a (1\le n\le2\times10^5,1\le a_i\le10^9)$，求出$\sum\limits_{1\le i\le j\le n}d(a_i,a_j)$。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 337D Book of Evil 题解</title>
    <link href="http://yoursite.com/2019/11/02/Codeforces-337D-Book-of-Evil-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/11/02/Codeforces-337D-Book-of-Evil-题解/</id>
    <published>2019-11-02T08:54:57.000Z</published>
    <updated>2019-11-02T09:25:04.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-337D-Book-of-Evil-题解"><a href="#Codeforces-337D-Book-of-Evil-题解" class="headerlink" title="Codeforces 337D Book of Evil 题解"></a><a href="https://codeforces.com/contest/337/problem/D" target="_blank" rel="noopener">Codeforces 337D Book of Evil</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个有$n$个结点的树，树上有$m (1\le m\le n\le10^5)$个结点被感染，分别是$p_1,p_2,\dots,p_m (1\le p_i\le n)$。</p><p>有一本“邪恶之书”在树上的某一个结点上，它可以感染 所有到它的距离小于等于$d (0\le d\le n-1)$的结点。</p><p>求“邪恶之书”可以在哪些结点上，使得它可以感染$p_1,p_2,\dots,p_m$这些结点。输出可能的个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>与树的直径类似。</p><p>从$1$号结点<code>dfs</code>，找到距离它最远的<strong>感染结点</strong>$v_1$。</p><p>从$v_1$<code>dfs</code>，找到距离它最远的<strong>感染结点</strong>$v_2$。</p><p>从$v_2$<code>dfs</code>。</p><p>找到所有点$x$，使得到$v_1$和$v_2$的距离都小于等于$d$，输出个数即可。时间复杂度$O(n)$。</p><p><strong>证明</strong>：</p><p>定义$D(x,y)$为结点$x$到结点$y$的距离。</p><p>设$x$为满足$D(v_1,x)\le d$且$D(v_2,x)\le d$的任意结点。</p><p>需要证明 不存在感染结点$v_3$，使得$D(v_3,x)&gt;d$。</p><p>由求$v_1,v_2$的过程得：$v_1,v_2$是这棵树中，距离最大的两个感染结点(证明过程同树的直径的证明过程)。</p><p>若$D(v_1,x)\le d,D(v_2,x)\le d,D(v_3,x)&gt;d$，则$D(v_1,v_3)&gt;D(v_1,v_2)$，矛盾。</p><p>证毕。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL res=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> res%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,d,p[maxn],dist[<span class="number">3</span>][maxn],v1,v2,ans;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa,<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">repV(y,e[x]) <span class="keyword">if</span>(y!=fa)</span><br><span class="line">&#123;</span><br><span class="line">dist[root][y]=dist[root][x]+<span class="number">1</span>;</span><br><span class="line">dfs(y,x,root);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;d);</span><br><span class="line">rep(i,m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u;SF(<span class="string">"%d"</span>,&amp;u);</span><br><span class="line">p[u]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">rep(i,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;SF(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">e[u].push_back(v);</span><br><span class="line">e[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">rep1(i,n) <span class="keyword">if</span>(p[i]&amp;&amp;(!v1||dist[<span class="number">0</span>][i]&gt;dist[<span class="number">0</span>][v1])) v1=i;</span><br><span class="line"></span><br><span class="line">dfs(v1,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">rep1(i,n) <span class="keyword">if</span>(p[i]&amp;&amp;(!v2||dist[<span class="number">1</span>][i]&gt;dist[<span class="number">1</span>][v2])) v2=i;</span><br><span class="line"></span><br><span class="line">dfs(v2,<span class="number">0</span>,<span class="number">2</span>);</span><br><span class="line">rep1(i,n) <span class="keyword">if</span>(dist[<span class="number">1</span>][i]&lt;=d&amp;&amp;dist[<span class="number">2</span>][i]&lt;=d) ans++;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-337D-Book-of-Evil-题解&quot;&gt;&lt;a href=&quot;#Codeforces-337D-Book-of-Evil-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 337D Book of Evil 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/337/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 337D Book of Evil&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个有$n$个结点的树，树上有$m (1\le m\le n\le10^5)$个结点被感染，分别是$p_1,p_2,\dots,p_m (1\le p_i\le n)$。&lt;/p&gt;
&lt;p&gt;有一本“邪恶之书”在树上的某一个结点上，它可以感染 所有到它的距离小于等于$d (0\le d\le n-1)$的结点。&lt;/p&gt;
&lt;p&gt;求“邪恶之书”可以在哪些结点上，使得它可以感染$p_1,p_2,\dots,p_m$这些结点。输出可能的个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="分治" scheme="http://yoursite.com/tags/%E5%88%86%E6%B2%BB/"/>
    
      <category term="树形DP" scheme="http://yoursite.com/tags/%E6%A0%91%E5%BD%A2DP/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 587B Duff in Beach 题解</title>
    <link href="http://yoursite.com/2019/10/25/Codeforces-587B-Duff-in-Beach-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/25/Codeforces-587B-Duff-in-Beach-题解/</id>
    <published>2019-10-25T10:30:50.000Z</published>
    <updated>2019-11-10T03:35:39.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-587B-Duff-in-Beach-题解"><a href="#Codeforces-587B-Duff-in-Beach-题解" class="headerlink" title="Codeforces 587B Duff in Beach 题解"></a><a href="http://codeforces.com/contest/587/problem/B" target="_blank" rel="noopener">Codeforces 587B Duff in Beach</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个长度为$n$的数组$a_0,a_1,\dots,a_{n-1}$和一个长度为$l$的数组$b_0,b_1,\dots,b_{l-1}$，其中$b$是由$a$得出的，满足$b_i=a_{i\bmod n}$。</p><p>给定$n,l,k (1\le n,k,n\times k\le10^6,1\le l\le10^{18})$，求子序列$b_{i_1},b_{i_2},\dots,b_{i_x}$满足以下条件的数量：</p><ul><li>$1\le x\le k$</li><li>$\forall 1\le j\le x-1,\left\lfloor\frac{i_j}{n}\right\rfloor+1=\left\lfloor\frac{i_{j+1}}{n}\right\rfloor$</li><li>$\forall 1\le j\le x-1,b_{i_j}\le b_{i_{j-1}}$，即这个子序列是非下降子序列。</li></ul><p>输出这个数量模$10^9+7$。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>总结题意，可以知道$b$是由$a$重复$\left\lfloor\frac{l}{n}\right\rfloor$次加上$a$的前$l\%n$项得出的。</p><p>求的是一个长度小于$k$的非下降子序列，满足序列中的数在一些连续的“块”($a$重复一次算一块)中 的个数。</p><p>考虑DP：</p><ul><li>$dp(i,j)$表示考虑到第$i$块，选择了这一块的第$j$个数 的合法子序列个数。</li><li><script type="math/tex; mode=display">dp(i,j)=\sum_{0\le k<n,a_k\le a_j} dp(i-1,k)</script></li></ul><p>这样DP时间复杂度是$O(n^2k)$，需要优化：</p><p>因为每一块中只会取一个数，所以把$a$排序，是不会影响结果的。每次维护一个前缀和，这样可以$O(1)$转移，总共是$O(nk)$的。</p><p>求出了$dp$数组后</p><ul><li>对于$\left\lfloor\frac{l}{n}\right\rfloor$个整块，枚举长度$i$和最后一个数$a_j$，$ans+=dp(i,j)\times(\left\lfloor\frac{l}{n}\right\rfloor-i+1)$。</li><li>对于剩下的$l\%n$个数，枚举长度$i$和最后一个数$a_j(0\le j&lt;l\%n)$，$ans+=dp(i,j)$。</li></ul><p>Tip：$dp$数组可能很大，要用<code>vector</code>动态开数组。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line">LL n,m,k,a[maxn],b[maxn],l,ans;</span><br><span class="line"><span class="built_in">map</span>&lt;LL,<span class="keyword">int</span>&gt; p;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;LL&gt; &gt; dp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;l,&amp;k);m=min(k,l/n);</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">b[i]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(b,b+n);</span><br><span class="line">rep(i,n) p[b[i]]=i;</span><br><span class="line"></span><br><span class="line">dp.resize(m+<span class="number">2</span>);</span><br><span class="line">rep1(i,m+<span class="number">1</span>) dp[i].resize(n,(i==<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">repa1(i,<span class="number">2</span>,m+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">LL cur=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">rep(j,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(b[pos]&lt;=b[j]&amp;&amp;pos&lt;n) cur=(cur+dp[i<span class="number">-1</span>][pos++])%MOD;</span><br><span class="line">dp[i][j]=cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep1(i,m) rep(j,n) ans=(ans+dp[i][j]*((l/n-i+<span class="number">1</span>)%MOD)%MOD)%MOD;</span><br><span class="line">rep(i,l%n) rep1(j,min(k,l/n+<span class="number">1</span>)) ans=(ans+dp[j][p[a[i]]])%MOD;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-587B-Duff-in-Beach-题解&quot;&gt;&lt;a href=&quot;#Codeforces-587B-Duff-in-Beach-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 587B Duff in Beach 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/587/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 587B Duff in Beach&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;有一个长度为$n$的数组$a_0,a_1,\dots,a_{n-1}$和一个长度为$l$的数组$b_0,b_1,\dots,b_{l-1}$，其中$b$是由$a$得出的，满足$b_i=a_{i\bmod n}$。&lt;/p&gt;
&lt;p&gt;给定$n,l,k (1\le n,k,n\times k\le10^6,1\le l\le10^{18})$，求子序列$b_{i_1},b_{i_2},\dots,b_{i_x}$满足以下条件的数量：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$1\le x\le k$&lt;/li&gt;
&lt;li&gt;$\forall 1\le j\le x-1,\left\lfloor\frac{i_j}{n}\right\rfloor+1=\left\lfloor\frac{i_{j+1}}{n}\right\rfloor$&lt;/li&gt;
&lt;li&gt;$\forall 1\le j\le x-1,b_{i_j}\le b_{i_{j-1}}$，即这个子序列是非下降子序列。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输出这个数量模$10^9+7$。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 587C Duff in the Army 题解</title>
    <link href="http://yoursite.com/2019/10/25/Codeforces-587C-Duff-in-the-Army-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/25/Codeforces-587C-Duff-in-the-Army-题解/</id>
    <published>2019-10-25T10:13:33.000Z</published>
    <updated>2019-10-26T02:59:18.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-587C-Duff-in-the-Army-题解"><a href="#Codeforces-587C-Duff-in-the-Army-题解" class="headerlink" title="Codeforces 587C Duff in the Army 题解"></a><a href="http://codeforces.com/contest/587/problem/C" target="_blank" rel="noopener">Codeforces 587C Duff in the Army</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一棵有$n$个结点的树，某些结点上有一些数，总共有$m$个数，有$q (1\le n,m,k\le 10^5)$次询问。</p><p>每次询问给定$u,v,a (1\le u,v\le n,1\le a\le10)$，求出 在$u$到$v$的路径上所有的结点上的数中，前$a$小的数(如果总数小于$a$，则输出所有的数)。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>在树中，从$u$到$v$的路径上，$a\le10$，从这三个条件可以想到用树链剖分，线段树中每个结点维护的是一个长度小于等于$10$的<code>vector</code>，表示的是这些点中前$10$小的数，可以$O(1)$合并。</p><p>因为没有修改，所以省去了很多。程序也不是太难写。</p><p>时间复杂度$O(q\log n)$。</p><p>Tip: 可以用LCA，也是维护前$10$小的数，时间复杂度同样。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w;</span><br><span class="line">&#125; tree[maxn*<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q,son[maxn],id[maxn],fa[maxn],cnt,dep[maxn],siz[maxn],top[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn],w[maxn],wt[maxn],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;a,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(c.size()&lt;<span class="number">10</span>&amp;&amp;(l!=a.size()||r!=b.size()))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(l==a.size()) c.push_back(b[r++]); <span class="keyword">else</span> <span class="keyword">if</span>(r==b.size()) c.push_back(a[l++]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[l]&lt;b[r]) c.push_back(a[l++]); <span class="keyword">else</span> c.push_back(b[r++]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a=c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">seg_build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[k].l=l;tree[k].r=r;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tree[k].w=wt[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">seg_build(l,mid,k*<span class="number">2</span>);</span><br><span class="line">seg_build(mid+<span class="number">1</span>,r,k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">update(tree[k].w,tree[k*<span class="number">2</span>].w);</span><br><span class="line">update(tree[k].w,tree[k*<span class="number">2</span>+<span class="number">1</span>].w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">seg_range_sum</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[k].l&gt;=l&amp;&amp;tree[k].r&lt;=r) <span class="keyword">return</span> update(ans,tree[k].w);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid=(tree[k].l+tree[k].r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) seg_range_sum(l,r,k*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) seg_range_sum(l,r,k*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> f,<span class="keyword">int</span> deep)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[x]=deep;</span><br><span class="line">fa[x]=f;</span><br><span class="line">siz[x]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=e[x][i];</span><br><span class="line"><span class="keyword">if</span>(y!=f)</span><br><span class="line">&#123;</span><br><span class="line">dfs1(y,x,deep+<span class="number">1</span>);</span><br><span class="line">siz[x]+=siz[y];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(son[x]==<span class="number">0</span>||siz[y]&gt;siz[son[x]]) son[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">id[x]=++cnt;</span><br><span class="line">wt[cnt]=w[x];</span><br><span class="line">top[x]=tp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!son[x]) <span class="keyword">return</span>;</span><br><span class="line">dfs2(son[x],tp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=e[x][i];</span><br><span class="line"><span class="keyword">if</span>(y!=fa[x]&amp;&amp;y!=son[x]) dfs2(y,y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hld_sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ans.clear();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]]) swap(x,y);</span><br><span class="line">seg_range_sum(id[top[x]],id[x],<span class="number">1</span>);</span><br><span class="line">x=fa[top[x]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dep[x]&gt;dep[y]) swap(x,y);</span><br><span class="line"></span><br><span class="line">seg_range_sum(id[x],id[y],<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d "</span>,min(SZ(ans),a));</span><br><span class="line">rep(i,min(SZ(ans),a)) PF(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">PF(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;SF(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">e[x].push_back(y);</span><br><span class="line">e[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line">rep1(i,m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;SF(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line"><span class="keyword">if</span>(w[x].size()&lt;<span class="number">10</span>) w[x].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">dfs2(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">seg_build(<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u,v,a;SF(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;a);</span><br><span class="line">hld_sum(u,v,a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-587C-Duff-in-the-Army-题解&quot;&gt;&lt;a href=&quot;#Codeforces-587C-Duff-in-the-Army-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 587C Duff in the Army 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/587/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 587C Duff in the Army&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一棵有$n$个结点的树，某些结点上有一些数，总共有$m$个数，有$q (1\le n,m,k\le 10^5)$次询问。&lt;/p&gt;
&lt;p&gt;每次询问给定$u,v,a (1\le u,v\le n,1\le a\le10)$，求出 在$u$到$v$的路径上所有的结点上的数中，前$a$小的数(如果总数小于$a$，则输出所有的数)。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树链剖分" scheme="http://yoursite.com/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="LCA" scheme="http://yoursite.com/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1238C Standard Free2play 题解</title>
    <link href="http://yoursite.com/2019/10/21/Codeforces-1238C-Standard-Free2play-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/21/Codeforces-1238C-Standard-Free2play-题解/</id>
    <published>2019-10-21T12:00:17.000Z</published>
    <updated>2019-10-26T02:58:54.285Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1238C-Standard-Free2play-题解"><a href="#Codeforces-1238C-Standard-Free2play-题解" class="headerlink" title="Codeforces 1238C Standard Free2play 题解"></a><a href="http://codeforces.com/contest/1238/problem/C" target="_blank" rel="noopener">Codeforces 1238C Standard Free2play</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有一个高为$h (1\le h\le10^9)$的悬崖，在高度为$x(1\le x\le h)$的位置上，有一个可移动的平台。</p><p>每个平台有两种状态：隐藏在悬崖里 或 在悬崖外。一开始，有$n (1\le n\le\min(h,2\cdot10^5))$个在悬崖外的平台，分别为$p_1,p_2,\dots,p_n$，其中$p_1=h$。</p><p>你一开始站在$p_1$上，即在悬崖最高点$h$。若你站在高度为$x$的地方(高度为$x$的平台必须在悬崖外)，你可以按下一个按钮。如果你按下了按钮，那么高度为$x$和$x-1$的平台的状态会改变，即高度为$x$的平台隐藏到悬崖里，若高度为$x-1$的平台在悬崖里，则它移动到悬崖外；若它在悬崖外，则隐藏到悬崖里。如果按下按钮后，高度为$x-1$的平台在悬崖外，那么你安全地落在高度为$x-1$的平台上(否则你会掉落在下一个在悬崖外的平台上)。<strong>这是唯一一种方式从一个平台移动到另外一个平台</strong>。</p><p>你可以安全地从$x$掉落到$x-2$，但是如果从$x$掉落在$x-3$或更低处，你就死了。</p><p>你可以使用魔法。一次魔法只能使在任何高度的平台改变状态(除了高度为$h$的平台)。</p><p>求你使用魔法的最小次数，使得你安全地落在地上(即高度为$0$的地方)。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先，若你在高度为$x$的平台上，下一个在悬崖外平台的高度为$y$且$x&gt;y+1$，那么你可以安全地、不使用任何魔法，从$x$到达$y+1$。</p><p>现在要考虑的是，你在高度为$x$的平台上，有多个连续的、在悬崖外的平台，设它们的高度为$q_1,q_2,\dots,q_n$且$q_1=x,\forall 1\le i&lt;n,q_i=q_{i+1}+1$。</p><ul><li>若$n$为奇数，则可以安全地、不使用任何魔法，从$q_1$到达$q_n$(因为每次按下按钮，都只会掉下$2$格)。</li><li>若$n$为偶数，则需要一次魔法(如果不使用魔法，在$q_{n-1}$按下按钮时，会掉下$2$格以上)，把高度为$q_n+1$的平台移动到悬崖外。</li></ul><p>注意，当$q_n=1$时，可以不需要魔法，直接掉落$2$格到地面。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> q,h,n,p[maxn],ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;h,&amp;n);</span><br><span class="line">rep(i,n) SF(<span class="string">"%d"</span>,&amp;p[i]);</span><br><span class="line"></span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur=p[i],cnt=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p[i]==p[i+<span class="number">1</span>]+<span class="number">1</span>&amp;&amp;i+<span class="number">1</span>&lt;n)</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>((cur==h&amp;&amp;(cnt%<span class="number">2</span>==<span class="number">0</span>)||cur!=h&amp;&amp;(cnt%<span class="number">2</span>==<span class="number">1</span>))&amp;&amp;p[i]!=<span class="number">1</span>) ans++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1238C-Standard-Free2play-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1238C-Standard-Free2play-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1238C Standard Free2play 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/1238/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1238C Standard Free2play&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;有一个高为$h (1\le h\le10^9)$的悬崖，在高度为$x(1\le x\le h)$的位置上，有一个可移动的平台。&lt;/p&gt;
&lt;p&gt;每个平台有两种状态：隐藏在悬崖里 或 在悬崖外。一开始，有$n (1\le n\le\min(h,2\cdot10^5))$个在悬崖外的平台，分别为$p_1,p_2,\dots,p_n$，其中$p_1=h$。&lt;/p&gt;
&lt;p&gt;你一开始站在$p_1$上，即在悬崖最高点$h$。若你站在高度为$x$的地方(高度为$x$的平台必须在悬崖外)，你可以按下一个按钮。如果你按下了按钮，那么高度为$x$和$x-1$的平台的状态会改变，即高度为$x$的平台隐藏到悬崖里，若高度为$x-1$的平台在悬崖里，则它移动到悬崖外；若它在悬崖外，则隐藏到悬崖里。如果按下按钮后，高度为$x-1$的平台在悬崖外，那么你安全地落在高度为$x-1$的平台上(否则你会掉落在下一个在悬崖外的平台上)。&lt;strong&gt;这是唯一一种方式从一个平台移动到另外一个平台&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;你可以安全地从$x$掉落到$x-2$，但是如果从$x$掉落在$x-3$或更低处，你就死了。&lt;/p&gt;
&lt;p&gt;你可以使用魔法。一次魔法只能使在任何高度的平台改变状态(除了高度为$h$的平台)。&lt;/p&gt;
&lt;p&gt;求你使用魔法的最小次数，使得你安全地落在地上(即高度为$0$的地方)。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1238D AB-string 题解</title>
    <link href="http://yoursite.com/2019/10/21/Codeforces-1238D-AB-string-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/21/Codeforces-1238D-AB-string-题解/</id>
    <published>2019-10-21T10:18:42.000Z</published>
    <updated>2019-11-10T02:19:28.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1238D-AB-string-题解"><a href="#Codeforces-1238D-AB-string-题解" class="headerlink" title="Codeforces 1238D AB-string 题解"></a><a href="http://codeforces.com/contest/1238/problem/D" target="_blank" rel="noopener">Codeforces 1238D AB-string</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个字符串$s$如果 它的每一个字符都属于至少一个长度大于$1$的回文子串，那么称$s$是“好的”。如<code>AABBB</code>,<code>ABAA</code>,<code>AAAAA</code>是好的。</p><p>给定一个长度为$n (1\le n\le 3\cdot10^5)$的字符串$s$，求出$s$中好的子串的个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设一个字符串$t$由$t_1\dots t_n$组成，则$\forall 1&lt;i&lt;n$，$t_i$属于一个回文子串(默认长度大于$1$，以下同理)。</p><p>证明：设$i$满足$1&lt;i&lt;n$，</p><ul><li>若$t_i=t_{i-1}$，则它属于回文串$t_{i-1}t_i$。</li><li>若$t_i=t_{i+1}$，则它属于回文串$t_it_{i+1}$。</li><li>若$t_i\neq t_{i-1},t_i\neq t_{i+1}$，那么$t_{i-1}=t_{i+1}$，则它属于回文串$t_{i-1}t_it_{i+1}$。</li></ul><p>那么，只有当$i=1$或$i=n$时，$t_i$才有可能不属于一个回文子串。</p><p>下面考虑$t_1$不属于一个回文子串的情况。</p><ul><li>$t_2\neq t_1$，否则$t_1$属于回文串$t_1t_2$。</li><li>$\forall i&gt;2$，$t_i\neq t_{i-1}$，否则$t_1$属于回文串$t_1\dots t_i$</li></ul><p>$t_n$同理。</p><p>所以，$t$只有形如以下四种字符串时，$t$不是好的。</p><ul><li><code>AB...B</code></li><li><code>BA...A</code></li><li><code>A...AB</code></li><li><code>B...BA</code></li></ul><p>给定$s$，求$s$中好的子串的个数，那么就可以转化为 所有子串-不是好的子串，即$\frac{n\times(n-1)}{2}-cnt$，$cnt$为不是好的子串。</p><p>显然，$cnt$可以$O(n)$求出。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line"></span><br><span class="line">ans=<span class="number">1l</span>l*n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++) <span class="keyword">if</span>(s[j]!=s[i]) ans-=(j==i+<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>); <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">repd(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) <span class="keyword">if</span>(s[j]!=s[i]) ans--; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure><p>Tip: 这个程序看似是$O(n^2)$的，实际上是$O(n)$的。这里不再赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1238D-AB-string-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1238D-AB-string-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1238D AB-string 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/1238/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1238D AB-string&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;一个字符串$s$如果 它的每一个字符都属于至少一个长度大于$1$的回文子串，那么称$s$是“好的”。如&lt;code&gt;AABBB&lt;/code&gt;,&lt;code&gt;ABAA&lt;/code&gt;,&lt;code&gt;AAAAA&lt;/code&gt;是好的。&lt;/p&gt;
&lt;p&gt;给定一个长度为$n (1\le n\le 3\cdot10^5)$的字符串$s$，求出$s$中好的子串的个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="组合数学" scheme="http://yoursite.com/tags/%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 343C Read Time 题解</title>
    <link href="http://yoursite.com/2019/10/15/Codeforces-343C-Read-Time-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/15/Codeforces-343C-Read-Time-题解/</id>
    <published>2019-10-15T13:10:31.000Z</published>
    <updated>2019-10-26T02:57:53.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-343C-Read-Time-题解"><a href="#Codeforces-343C-Read-Time-题解" class="headerlink" title="Codeforces 343C Read Time 题解"></a><a href="http://codeforces.com/contest/343/problem/C" target="_blank" rel="noopener">Codeforces 343C Read Time</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一个无限长的线性磁盘上，有$n$个<strong>独立</strong>的磁头和$m$个需读取的位置$(1\le n,m\le 10^5)$，第$i$个磁头的初始位置为$h_i (1\le h_i\le 10^{10},h_i&lt;h_{i+1})$，第$j$个需读取位置为$p_j (1\le p_j\le 10^{10},p_j&lt;p_{j+1})$，需读取的位置互不相同的。</p><p><img src="https://codeforces.com/predownloaded/82/ea/82ea119f119277c71e28c458bd2febd9134ba7ad.png" alt="n=3,m=4,h=[2,5,6],p=[1,3,6,8]"></p><p>每一个磁头可以花一个单位时间移动到左边或右边的位置，也可以不动。可以有多个磁头在同一位置。每个磁头可以读取无限多个位置。一个位置被至少一个磁头走过后，它就被读取了。特别，一开始时，$h_i (1\le i\le n)$的位置就被读取过了。</p><p>求读取所有需读取位置需要的最少时间。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑二分需要的时间。</p><p>对于<code>check(time)</code>函数，每个磁头都有<code>time</code>单位个时间。</p><p>设当前考虑的磁头为第$i$个磁头，设$pos$为 第$i-1$个磁头没有完成的最左边的需读取位置，那么它要在读取$pos$后，尽可能地多读取位置。</p><p>确定尽可能向后读取的位置有两种，设走到$pos$后，还剩$r$个单位时间。</p><ul><li><p>先走到$pos$，再用$r$个时间尽可能地多读取位置。</p></li><li><p>先用$\frac{r}{2}$个时间尽可能地多读取位置(用$\frac{r}{2}$个时间走回来)，再走到$pos$。</p></li></ul><p>在$p$中<code>upper_bound(MAX)</code>后，就可以找到第$i$个磁头没有完成的最左边的需读取位置了。</p><p>所以<code>check</code>函数的时间复杂度是$O(n\log n)$。</p><p>Tip: 还有一种方法可以使<code>check</code>函数的时间复杂度是$O(n)$，具体不再赘述。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL h[maxn],p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">rep1(i,n)</span><br><span class="line">&#123;</span><br><span class="line">LL rem=x-<span class="built_in">abs</span>(h[i]-p[pos]);</span><br><span class="line"><span class="keyword">if</span>(rem&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">pos=upper_bound(p+<span class="number">1</span>,p+m+<span class="number">1</span>,max(p[pos]+rem,h[i]+rem/<span class="number">2</span>))-p;</span><br><span class="line"><span class="comment">// max(go to read `pos`-&gt;go to read as more as possible tracks , \</span></span><br><span class="line">   go to read as more as possible tracks-&gt;go to read `pos`)</span><br><span class="line"><span class="keyword">if</span>(pos==m+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;h[i]);</span><br><span class="line">rep1(i,m) SF(<span class="string">"%lld"</span>,&amp;p[i]);</span><br><span class="line"></span><br><span class="line">LL l=<span class="number">0</span>,r=<span class="number">1e18</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">LL mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-343C-Read-Time-题解&quot;&gt;&lt;a href=&quot;#Codeforces-343C-Read-Time-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 343C Read Time 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/343/problem/C&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 343C Read Time&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;在一个无限长的线性磁盘上，有$n$个&lt;strong&gt;独立&lt;/strong&gt;的磁头和$m$个需读取的位置$(1\le n,m\le 10^5)$，第$i$个磁头的初始位置为$h_i (1\le h_i\le 10^{10},h_i&amp;lt;h_{i+1})$，第$j$个需读取位置为$p_j (1\le p_j\le 10^{10},p_j&amp;lt;p_{j+1})$，需读取的位置互不相同的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://codeforces.com/predownloaded/82/ea/82ea119f119277c71e28c458bd2febd9134ba7ad.png&quot; alt=&quot;n=3,m=4,h=[2,5,6],p=[1,3,6,8]&quot;&gt;&lt;/p&gt;
&lt;p&gt;每一个磁头可以花一个单位时间移动到左边或右边的位置，也可以不动。可以有多个磁头在同一位置。每个磁头可以读取无限多个位置。一个位置被至少一个磁头走过后，它就被读取了。特别，一开始时，$h_i (1\le i\le n)$的位置就被读取过了。&lt;/p&gt;
&lt;p&gt;求读取所有需读取位置需要的最少时间。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 343B Alternating Current 题解</title>
    <link href="http://yoursite.com/2019/10/15/Codeforces-343B-Alternating-Current-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/15/Codeforces-343B-Alternating-Current-题解/</id>
    <published>2019-10-15T13:10:04.000Z</published>
    <updated>2019-10-26T02:57:26.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-343B-Alternating-Current-题解"><a href="#Codeforces-343B-Alternating-Current-题解" class="headerlink" title="Codeforces 343B Alternating Current 题解"></a><a href="http://codeforces.com/contest/343/problem/B" target="_blank" rel="noopener">Codeforces 343B Alternating Current</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有两根长度为$n (1\le n\le 10^5)$个单位，两头固定的电线，它们缠绕在一起，给定一个长为$n$，由<code>+</code>和<code>-</code>组成的字符串$s$，其中</p><ul><li><p>若$s_i$为<code>+</code>，则在第$i$个单位长度时，第一根电线在第二根电线上。</p></li><li><p>若$s_i$为<code>-</code>，则在第$i$个单位长度时，第二根电线在第一根电线上。</p></li></ul><p><img src="https://codeforces.com/predownloaded/33/7c/337c85cb33b214e0e8437a4d03da7ec71eb11596.png" alt="n=4,s=&quot;-++-&quot;"></p><p>求不拔出电线且不移动装置时，是否能解开它们。若可以，输出<code>Yes</code>；否则输出<code>No</code>。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据题意知道：若两个<code>+</code>或两个<code>-</code>连在一起时，则那两个单位长度可以解开。</p><p>那么如果删去了所有的<code>++</code>和<code>--</code>后，字符串为空，则可以解开；否则不可以。</p><p>因为$1\le n\le 10^5$，所以程序的时间复杂度不能是$O(n^2)$，在字符串中暴力删除肯定不行。</p><p>考虑$O(n)$的做法。若当前长度为$i$，字符$s_i (0&lt;i\le n)$等于$s_{i-1}$，则使$i=i-2$。这样删去后 后面的字符也可以和前面的字符配成<code>++</code>或<code>--</code>，符合题目要求。判断有没有删完即可。</p><p>使用<code>stack</code>可以使程序更简洁。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">repV(i,s) <span class="keyword">if</span>(!sta.empty()&amp;&amp;sta.top()==i) sta.pop(); <span class="keyword">else</span> sta.push(i);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(sta.empty()?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-343B-Alternating-Current-题解&quot;&gt;&lt;a href=&quot;#Codeforces-343B-Alternating-Current-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 343B Alternating Current 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/343/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 343B Alternating Current&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;有两根长度为$n (1\le n\le 10^5)$个单位，两头固定的电线，它们缠绕在一起，给定一个长为$n$，由&lt;code&gt;+&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;组成的字符串$s$，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若$s_i$为&lt;code&gt;+&lt;/code&gt;，则在第$i$个单位长度时，第一根电线在第二根电线上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若$s_i$为&lt;code&gt;-&lt;/code&gt;，则在第$i$个单位长度时，第二根电线在第一根电线上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://codeforces.com/predownloaded/33/7c/337c85cb33b214e0e8437a4d03da7ec71eb11596.png&quot; alt=&quot;n=4,s=&amp;quot;-++-&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;求不拔出电线且不移动装置时，是否能解开它们。若可以，输出&lt;code&gt;Yes&lt;/code&gt;；否则输出&lt;code&gt;No&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 343A Rational Resistance 题解</title>
    <link href="http://yoursite.com/2019/10/15/Codeforces-343A-Rational-Resistance-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/15/Codeforces-343A-Rational-Resistance-题解/</id>
    <published>2019-10-15T13:09:08.000Z</published>
    <updated>2019-10-26T02:56:53.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-343A-Rational-Resistance-题解"><a href="#Codeforces-343A-Rational-Resistance-题解" class="headerlink" title="Codeforces 343A Rational Resistance 题解"></a><a href="http://codeforces.com/contest/343/problem/A" target="_blank" rel="noopener">Codeforces 343A Rational Resistance</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>你有很多个电阻器，一个电阻器$R_0$的电阻是$1$。</p><p>设一个电阻元件的电阻为$R$，可以由以下三种方式得到一个电阻元件</p><ul><li>一个电阻器，则$R=R_0$。</li><li>一个电阻元件(电阻为$R_e$)串联一个电阻器，则$R=R_e+R_0$。</li><li>一个电阻元件(电阻为$R_e$)并联一个电阻器，则$R=\frac{1}{\frac{1}{R_e}+\frac{1}{R_0}}$。</li></ul><p><img src="https://codeforces.com/predownloaded/59/16/591632416583be376234349922646b3cb38701f4.png" alt></p><p>给定一个最简分数$\frac{a}{b} (1\le a,b\le 10^{18})$，求至少要多少个电阻器 使得 得到的电阻元件的电阻为$\frac{a}{b}$。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设有一个电阻元件的电阻为$\frac{x}{y}$。</p><ul><li><p>串联后电阻为$\frac{x}{y}+1=\frac{x+y}{y}$。</p></li><li><p>并联后电阻为$\frac{1}{\frac{1}{\frac{x}{y}}+1}=\frac{x}{x+y}$。</p></li></ul><p>那么</p><ul><li><p>若$x&gt;y$，则$\frac{x}{y}$是由$\frac{x-y}{y}$ 串联得出的。</p></li><li><p>若$x&lt;y$，则$\frac{x}{y}$是由$\frac{x}{y-x}$ 并联得出的。</p></li></ul><p>这样用大的数减小的数，就是辗转相减法，每减一次，答案加$1$。</p><p>但是数据范围太大，可以把辗转相减法转换成辗转相除法，每除一次，答案加 大数整除小数的结果。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=INF;</span><br><span class="line"></span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sol</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b) <span class="keyword">return</span>;</span><br><span class="line">ans+=a/b;</span><br><span class="line">sol(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL a,b;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line">sol(a,b);</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-343A-Rational-Resistance-题解&quot;&gt;&lt;a href=&quot;#Codeforces-343A-Rational-Resistance-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 343A Rational Resistance 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/343/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 343A Rational Resistance&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;你有很多个电阻器，一个电阻器$R_0$的电阻是$1$。&lt;/p&gt;
&lt;p&gt;设一个电阻元件的电阻为$R$，可以由以下三种方式得到一个电阻元件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个电阻器，则$R=R_0$。&lt;/li&gt;
&lt;li&gt;一个电阻元件(电阻为$R_e$)串联一个电阻器，则$R=R_e+R_0$。&lt;/li&gt;
&lt;li&gt;一个电阻元件(电阻为$R_e$)并联一个电阻器，则$R=\frac{1}{\frac{1}{R_e}+\frac{1}{R_0}}$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://codeforces.com/predownloaded/59/16/591632416583be376234349922646b3cb38701f4.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;给定一个最简分数$\frac{a}{b} (1\le a,b\le 10^{18})$，求至少要多少个电阻器 使得 得到的电阻元件的电阻为$\frac{a}{b}$。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1228F One Node is Gone 题解</title>
    <link href="http://yoursite.com/2019/10/02/Codeforces-1228F-One-Node-is-Gone-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/02/Codeforces-1228F-One-Node-is-Gone-题解/</id>
    <published>2019-10-02T13:14:08.000Z</published>
    <updated>2019-11-08T23:50:18.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1228F-One-Node-is-Gone-题解"><a href="#Codeforces-1228F-One-Node-is-Gone-题解" class="headerlink" title="Codeforces 1228F One Node is Gone 题解"></a><a href="https://codeforces.com/contest/1228/problem/F" target="_blank" rel="noopener">Codeforces 1228F One Node is Gone</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n (1\le n\le17)$，定义<em>McDic’s generation</em>为</p><ol><li>建一个有$2^n-1$个结点的满二叉树</li><li>从这个二叉树中选择一个非根结点$v$</li><li>把$v$从树中删除，从$v$的父亲到$v$的儿子连边，如果$v$没有儿子，那么就不连边。</li></ol><p>现在给定一棵树，判断这棵树是否可以经过<em>McDic’s generation</em>一次得到。如果可以，输出被删除的结点的父亲。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先，要找到这棵树的根。我们知道，一棵满二叉树的根结点在它的直径的中间，而删除一个结点后，根在直径的位置可能会偏移$1$个，为了保险，可以假设它偏移了$2$个位置。把这$5$个结点当作根，进行<code>DFS</code>。</p><p>设当前点为$x$，$cnt$为$x$的儿子个数，<code>DFS(x)</code>的返回值为一个<code>pair&lt;int,int&gt;</code>，其中：</p><ol><li>如果以$x$为根的子树非法，返回<code>{0,-1}</code></li><li>如果以$x$为根的子树为一个满二叉树，返回<code>{1,x离叶子结点的距离}</code></li><li>如果被删除的结点在以$x$为根的子树内，返回<code>{2,x离叶子结点的距离}</code></li></ol><p>很容易知道，如果<code>cnt&gt;3</code>，则返回<code>{0,-1}</code>；如果<code>cnt=0</code>，则它是叶子结点，返回<code>{1,0}</code>。</p><p>如果$x$不为以上两种情况，<code>DFS</code>它的儿子$y$，设<code>DFS(y)</code>的返回值为$got$</p><ol><li><p>如果<code>got.first=0</code>，则以$x$为根的子树也非法，返回<code>{0,-1}</code></p></li><li><p>如果<code>got.first=1</code>，则把<code>got.second</code>存入<code>vector&lt;int&gt; valid</code></p></li><li><p>如果<code>got.first=2</code>，则把<code>got.second</code>存入<code>vector&lt;int&gt; spec</code></p></li></ol><p>如果<code>spec.size()&gt;=2</code>，显然非法，返回<code>{0,-1}</code></p><p>对<code>valid</code>排序。</p><p>如果<code>cnt=1</code>，说明被删除的结点是它的叶子结点，</p><ul><li>如果<code>valid.size()=1且valid[0]=0</code>，合法，存储答案并返回<code>{2,1}</code></li><li>否则返回<code>{0,-1}</code></li></ul><p>如果<code>cnt=2</code>，</p><ul><li><p>如果<code>valid.size()=2且valid[0]=valid[1]</code>，说明它是一个正常的满二叉树，返回<code>{1,valid[0]+1}</code></p></li><li><p>如果<code>valid.size()=1且valid[0]=spec[0]</code>，说明被删除的结点在它的其中一个子树中，返回<code>{2,valid[0]+1}</code></p></li><li><p>否则返回<code>{0,-1}</code></p></li></ul><p>如果<code>cnt=3</code>，</p><ul><li><p>如果<code>valid.size()=3且valid[0]=valid[1]且valid[1]+1=valid[2]</code>，说明它的其中一个儿子被删除了，返回<code>{2,valid[2]+1}</code></p></li><li><p>否则返回<code>{0,-1}</code></p></li></ul><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1</span>&lt;&lt;<span class="number">17</span>)+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,par[maxn],ansv;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn],seq,ans;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getpar</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">par[x]=fa;</span><br><span class="line">pii res=&#123;<span class="number">0</span>,x&#125;;</span><br><span class="line"></span><br><span class="line">repV(y,e[x]) <span class="keyword">if</span>(y!=fa)</span><br><span class="line">&#123;</span><br><span class="line">pii got=getpar(y,x);got.fs++;</span><br><span class="line">res=max(res,got);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">sol</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=e[x].size()-(fa!=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;<span class="number">3</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; valid,spec;valid.clear();spec.clear();</span><br><span class="line">repV(y,e[x]) <span class="keyword">if</span>(y!=fa)</span><br><span class="line">&#123;</span><br><span class="line">pii got=sol(y,x);</span><br><span class="line"><span class="keyword">if</span>(got.fs==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(got.fs==<span class="number">1</span>) valid.push_back(got.sc);</span><br><span class="line"><span class="keyword">else</span> spec.push_back(got.sc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(spec.size()&gt;=<span class="number">2</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">sort(All(valid));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ansv=x;</span><br><span class="line"><span class="keyword">if</span>(valid.size()==<span class="number">1</span>&amp;&amp;valid[<span class="number">0</span>]==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(valid.size()==<span class="number">2</span>&amp;&amp;valid[<span class="number">0</span>]==valid[<span class="number">1</span>]) <span class="keyword">return</span> &#123;<span class="number">1</span>,valid[<span class="number">0</span>]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(valid.size()==<span class="number">1</span>&amp;&amp;valid[<span class="number">0</span>]==spec[<span class="number">0</span>]) <span class="keyword">return</span> &#123;<span class="number">2</span>,valid[<span class="number">0</span>]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">ansv=x;</span><br><span class="line"><span class="keyword">if</span>(valid.size()==<span class="number">3</span>&amp;&amp;valid[<span class="number">0</span>]==valid[<span class="number">1</span>]&amp;&amp;valid[<span class="number">1</span>]+<span class="number">1</span>==valid[<span class="number">2</span>]) <span class="keyword">return</span> &#123;<span class="number">2</span>,valid[<span class="number">2</span>]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">n=(<span class="number">1</span>&lt;&lt;n)<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">rep(i,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;SF(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">e[x].push_back(y);</span><br><span class="line">e[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pii a=getpar(<span class="number">1</span>),b=getpar(a.sc),c=getpar(b.sc);</span><br><span class="line"><span class="keyword">int</span> x=c.sc;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">seq.push_back(x);</span><br><span class="line">x=par[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid=seq.size()/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=mid<span class="number">-2</span>;i&lt;=mid+<span class="number">2</span>;i++) <span class="keyword">if</span>(<span class="number">0</span>&lt;=i&amp;&amp;i&lt;seq.size())</span><br><span class="line">&#123;</span><br><span class="line">pii got=sol(seq[i]);</span><br><span class="line"><span class="keyword">if</span>(got.fs==<span class="number">2</span>) ans.push_back(ansv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(All(ans));ans.erase(unique(All(ans)),ans.end());</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d\n"</span>,ans.size());</span><br><span class="line">repV(i,ans) PF(<span class="string">"%d "</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1228F-One-Node-is-Gone-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1228F-One-Node-is-Gone-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1228F One Node is Gone 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/1228/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1228F One Node is Gone&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n (1\le n\le17)$，定义&lt;em&gt;McDic’s generation&lt;/em&gt;为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建一个有$2^n-1$个结点的满二叉树&lt;/li&gt;
&lt;li&gt;从这个二叉树中选择一个非根结点$v$&lt;/li&gt;
&lt;li&gt;把$v$从树中删除，从$v$的父亲到$v$的儿子连边，如果$v$没有儿子，那么就不连边。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在给定一棵树，判断这棵树是否可以经过&lt;em&gt;McDic’s generation&lt;/em&gt;一次得到。如果可以，输出被删除的结点的父亲。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 609F Frogs and mosquitoes 题解</title>
    <link href="http://yoursite.com/2019/09/21/Codeforces-609F-Frogs-and-mosquitoes-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/21/Codeforces-609F-Frogs-and-mosquitoes-题解/</id>
    <published>2019-09-21T14:42:56.000Z</published>
    <updated>2019-09-22T02:16:37.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-609F-Frogs-and-mosquitoes-题解"><a href="#Codeforces-609F-Frogs-and-mosquitoes-题解" class="headerlink" title="Codeforces 609F Frogs and mosquitoes 题解"></a><a href="http://codeforces.com/contest/609/problem/F" target="_blank" rel="noopener">Codeforces 609F Frogs and mosquitoes</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$n (1\le n\le 2\cdot10^5)$个青蛙固定在平面直角坐标系中$Ox$的非负半轴上，对于第$i (1\le i\le n)$个青蛙有两个值，分别是$x_i$和$t_i (0\le x_i,t_i\le 10^9)$($x_i$两两不同)，$x_i$代表它的位置，$t_i$代表它的舌头的长度。</p><p>有$m (1\le m\le 2\cdot10^5)$只蚊子也固定在$Ox$的非负半轴上，对于第$i (1\le i\le m)$只蚊子有两个值，分别是$p_i$和$b_i (0\le p_i,b_i\le 10^9)$，$p_i$代表它的位置，$b_i$代表它的大小。</p><p>如果一个青蛙$i$和一只蚊子$j$，满足 $p_j$在区间$[x_i,x_i+t_i]$内，那么青蛙$i$就可以吃掉蚊子$j$，并且<strong>舌头会增长$b_j$</strong>。<strong>如果有多个青蛙可以吃掉同一个蚊子，那么这个蚊子会被$x_i$最小的那个青蛙吃掉。</strong></p><p><strong>蚊子是按照输入的顺序降临的，如果第$i$个蚊子要降临，必须满足 青蛙吃光了<u>可能吃掉</u>的所有蚊子$j (1\le j&lt;i)$。</strong></p><p>问第$i$只青蛙吃掉了多少蚊子和最后它的舌头有多长。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对于青蛙$i$和$j$，如果$[x_i,x_i+t_i]$包含在$[x_j,x_j+t_j]$中，那么青蛙$i$就永远没有用了。</p><p><u>因为处于区间$[x_i,x_i+t_i]$内的蚊子总会被青蛙$j$吃掉($x_j&lt;x_i$)。</u></p><p>那么大体思路就出来了：</p><ol><li><p>读入青蛙，删除无用的青蛙</p></li><li><p>依次读入蚊子，每次读入蚊子$i$做出以下操作：</p><ol><li>如果蚊子$i$不能被如何青蛙吃掉，那么就丢入一个数据结构中，<code>continue</code>；否则：</li><li>选用处于最左边的青蛙$j$吃掉蚊子$i$。因为此是青蛙$j$的舌头变长了，所以再删除一遍无用的青蛙 并且 查找青蛙$j$可不可以再吃掉蚊子了。<strong>最后</strong>更新青蛙$j$的数据。</li></ol></li><li><p>输出答案</p></li></ol><p>完成这个过程可以用三个<code>set</code>完成，分别维护青蛙的$x_i$，$(x_i+t_i)$和目前没有被吃掉的蚊子，有关查找的操作可以用二分完成，具体见程序。时间复杂度$O(n\log{n}+m\log{m})$。</p><p>也可以用线段树完成。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cnt[maxn];</span><br><span class="line">LL x[maxn],t[maxn],p[maxn],b[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;pair&lt;LL,<span class="keyword">int</span>&gt; &gt; frl,frr,mos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase_frog</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(frl.find(&#123;x[id],id&#125;)==frl.end()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> it=frl.lower_bound(&#123;x[id]+<span class="number">1</span>,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(it==frl.end()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p=it-&gt;sc;</span><br><span class="line"><span class="keyword">if</span>(x[id]+t[id]&lt;x[p]+t[p]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">frl.erase(it);</span><br><span class="line">frr.erase(&#123;x[p]+t[p],p&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">frog_eat_mosquitoes</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> it=mos.lower_bound(&#123;x[id]+t[id]+<span class="number">1</span>,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(it==mos.begin()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">it--;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;fs&lt;x[id]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">t[id]+=b[it-&gt;sc];</span><br><span class="line">cnt[id]++;</span><br><span class="line"></span><br><span class="line">mos.erase(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;x[i],&amp;t[i]);</span><br><span class="line">frl.insert(&#123;x[i],i&#125;);</span><br><span class="line">frr.insert(&#123;x[i]+t[i],i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) erase_frog(i);</span><br><span class="line"></span><br><span class="line">rep(i,m)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;p[i],&amp;b[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it=frr.lower_bound(&#123;p[i],<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(it==frr.end()||x[it-&gt;sc]&gt;p[i])</span><br><span class="line">&#123;</span><br><span class="line">mos.insert(&#123;p[i],i&#125;);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id=it-&gt;sc;</span><br><span class="line"></span><br><span class="line">frr.erase(&#123;x[id]+t[id],id&#125;);</span><br><span class="line"></span><br><span class="line">t[id]+=b[i];</span><br><span class="line">cnt[id]++;</span><br><span class="line"></span><br><span class="line">frog_eat_mosquitoes(id);</span><br><span class="line">frr.insert(&#123;x[id]+t[id],id&#125;);</span><br><span class="line">erase_frog(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) PF(<span class="string">"%d %lld\n"</span>,cnt[i],t[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-609F-Frogs-and-mosquitoes-题解&quot;&gt;&lt;a href=&quot;#Codeforces-609F-Frogs-and-mosquitoes-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 609F Frogs and mosquitoes 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/609/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 609F Frogs and mosquitoes&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;有$n (1\le n\le 2\cdot10^5)$个青蛙固定在平面直角坐标系中$Ox$的非负半轴上，对于第$i (1\le i\le n)$个青蛙有两个值，分别是$x_i$和$t_i (0\le x_i,t_i\le 10^9)$($x_i$两两不同)，$x_i$代表它的位置，$t_i$代表它的舌头的长度。&lt;/p&gt;
&lt;p&gt;有$m (1\le m\le 2\cdot10^5)$只蚊子也固定在$Ox$的非负半轴上，对于第$i (1\le i\le m)$只蚊子有两个值，分别是$p_i$和$b_i (0\le p_i,b_i\le 10^9)$，$p_i$代表它的位置，$b_i$代表它的大小。&lt;/p&gt;
&lt;p&gt;如果一个青蛙$i$和一只蚊子$j$，满足 $p_j$在区间$[x_i,x_i+t_i]$内，那么青蛙$i$就可以吃掉蚊子$j$，并且&lt;strong&gt;舌头会增长$b_j$&lt;/strong&gt;。&lt;strong&gt;如果有多个青蛙可以吃掉同一个蚊子，那么这个蚊子会被$x_i$最小的那个青蛙吃掉。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;蚊子是按照输入的顺序降临的，如果第$i$个蚊子要降临，必须满足 青蛙吃光了&lt;u&gt;可能吃掉&lt;/u&gt;的所有蚊子$j (1\le j&amp;lt;i)$。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问第$i$只青蛙吃掉了多少蚊子和最后它的舌头有多长。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1119D Frets On Fire 题解</title>
    <link href="http://yoursite.com/2019/09/14/Codeforces-1119D-Frets-On-Fire-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/14/Codeforces-1119D-Frets-On-Fire-题解/</id>
    <published>2019-09-14T15:09:40.000Z</published>
    <updated>2019-10-27T04:16:56.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1119D-Frets-On-Fire-题解"><a href="#Codeforces-1119D-Frets-On-Fire-题解" class="headerlink" title="Codeforces 1119D Frets On Fire 题解"></a><a href="http://codeforces.com/contest/1119/problem/D" target="_blank" rel="noopener">Codeforces 1119D Frets On Fire</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$和$s_1,s_2,\dots,s_n$，由此得到一个$n\times(10^{18}+1)$的矩阵$f$，其中$f_{i,j}=s_i+j (1\le i\le n,0\le j\le 10^{18})$。</p><p>在样例$1$中，给定$n=6,s=[3,1,4,1,5,9]$，得到</p><script type="math/tex; mode=display">\begin{matrix} f & \textbf{0} & \textbf{1} & \textbf{2} & \textbf{3} & \textbf{4} & \textbf{5} & \textbf{6} & \textbf{7} & \ldots \\ s_1: & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & \dots \\ s_2: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_3: & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & \dots \\ s_4: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_5: & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & \dots \\ s_6: & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 & \dots \end{matrix}</script><p>再给定$q$个查询，每个查询有$L,R$，问第$L$列到第$R$列(以下表达为$[L,R]$)有多少个不同的数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>因为问的是列，所以行的顺序不重要，可以对$s$进行从小到大排序。</p><p>对样例$1$排完序之后矩阵变为</p><script type="math/tex; mode=display">\begin{matrix} \textbf{f} & \textbf{0} & \textbf{1} & \textbf{2} & \textbf{3} & \textbf{4} & \textbf{5} & \textbf{6} & \textbf{7} & \ldots \\ s_1: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_2: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_3: & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & \dots \\ s_4: & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & \dots \\ s_5: & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & \dots \\ s_6: & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 & \dots \end{matrix}</script><p>还有：查询$[L,R]$与查询$[0,R-L]$是等价的。</p><p>定义$r=R-L,w=r+1$。</p><p>考虑当每一行对于整个矩阵即$r=10^{18}$时的贡献。</p><p>对于样例$1$：</p><ul><li>第$1$行贡献了$0$个数$\{\varnothing\}$；</li><li>第$2$行贡献了$2$个数$\{1,2\}$；</li><li>第$3$行贡献了$1$个数$\{3\}$；</li><li>第$4$行贡献了$1$个数$\{4\}$；</li><li>第$5$行贡献了$4$个数$\{5,6,7,8\}$；</li><li>第$6$行贡献了$w$个数$\{9,10,\dots,9+10^{18}\}$。</li></ul><p>很容易发现，第$i (1\le i&lt;n)$行的贡献为$s_{i+1}-s_i$，第$n$行的贡献为$w$。</p><p>对于任意区间$[0,r]$，第$i (1\le i&lt;n)$行的贡献即为$\min\{s_{i+1}-s_i,w\}$，第$n$行的贡献为$w$。</p><p>那么答案即为$\sum_{i=1}^{n-1}{\min\{s_{i+1}-s_i,w\}}+w$。</p><p>问题：时间复杂度为$O(n\cdot q)$。</p><p>解答：设数组$t$，其中$t_i=s_{i+1}-s_i (1\le i&lt;n)$，将$t$从从小到大排序。设$p$为满足$t_p\le w$的最小值(用二分，时间复杂度为$O(\log n)$)，那么答案为$t_1+t_2+\dots+t_p+w\times(n-p)$($t_1+t_2+\dots+t_p$用前缀和求出)。时间复杂度为$O(\log n\cdot q)$。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line">LL s[maxn],pre[maxn],L,R;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;s[i]);</span><br><span class="line"></span><br><span class="line">sort(s+<span class="number">1</span>,s+n+<span class="number">1</span>);</span><br><span class="line">rep1(i,n<span class="number">-1</span>) s[i]=s[i+<span class="number">1</span>]-s[i];</span><br><span class="line"></span><br><span class="line">sort(s+<span class="number">1</span>,s+n);</span><br><span class="line">rep1(i,n<span class="number">-1</span>) pre[i]=pre[i<span class="number">-1</span>]+s[i];</span><br><span class="line"></span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;L,&amp;R);</span><br><span class="line"></span><br><span class="line">LL w=R-L+<span class="number">1</span>;<span class="keyword">int</span> id=lower_bound(s+<span class="number">1</span>,s+n,w)-(s+<span class="number">1</span>);</span><br><span class="line">PF(<span class="string">"%lld "</span>,pre[id]+(n-id)*w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1119D-Frets-On-Fire-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1119D-Frets-On-Fire-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1119D Frets On Fire 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/1119/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1119D Frets On Fire&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n$和$s_1,s_2,\dots,s_n$，由此得到一个$n\times(10^{18}+1)$的矩阵$f$，其中$f_{i,j}=s_i+j (1\le i\le n,0\le j\le 10^{18})$。&lt;/p&gt;
&lt;p&gt;在样例$1$中，给定$n=6,s=[3,1,4,1,5,9]$，得到&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{matrix} 
f &amp; \textbf{0} &amp; \textbf{1} &amp; \textbf{2} &amp; \textbf{3} &amp; \textbf{4} &amp; \textbf{5} &amp; \textbf{6} &amp; \textbf{7} &amp; \ldots \\ 
s_1: &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; \dots \\ 
s_2: &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; \dots \\ 
s_3: &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; 11 &amp; \dots \\ 
s_4: &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; \dots \\ 
s_5: &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; 11 &amp; 12 &amp; \dots \\ 
s_6: &amp; 9 &amp; 10 &amp; 11 &amp; 12 &amp; 13 &amp; 14 &amp; 15 &amp; 16 &amp; \dots 
\end{matrix}&lt;/script&gt;&lt;p&gt;再给定$q$个查询，每个查询有$L,R$，问第$L$列到第$R$列(以下表达为$[L,R]$)有多少个不同的数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="前缀和" scheme="http://yoursite.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 309B Context Advertising 题解</title>
    <link href="http://yoursite.com/2019/09/08/Codeforces-309B-Context-Advertising-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/08/Codeforces-309B-Context-Advertising-题解/</id>
    <published>2019-09-08T02:52:17.000Z</published>
    <updated>2019-09-08T03:35:43.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-309B-Context-Advertising-题解"><a href="#Codeforces-309B-Context-Advertising-题解" class="headerlink" title="Codeforces 309B Context Advertising 题解"></a><a href="http://codeforces.com/contest/309/problem/B" target="_blank" rel="noopener">Codeforces 309B Context Advertising</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n,r,c$和一个由$n$个单词组成的句子(两两单词之间有一个空格)，在这个句子里选出若干个连续的单词，组成一个“矩阵”，行数不能超过$r$，每行字符数不能超过$c$(<strong>包括空格</strong>)，不能把一个单词拆开。求合法矩阵中，单词数最多的那个矩阵，并输出。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目要求组成一个$r\times c$的矩阵。</p><ul><li>先考虑每行字符数的这个条件。设这个句子为$s_0,s_1,\dots,s_{n-1}$，对于一个单词$i(0\le i&lt; n)$，找出一个最大的$j(i&lt;j\le n)$，满足$|s_i|+|s_{i+1}|+\dots+|s_{j-1}|+(j-i-1)\le c$，从$i$到$j$连一条无向边。这个过程可以用双指针或二分完成。这样，就构造了一棵树。</li><li>再考虑行数这个条件。对于树上每个结点$i$，用倍增求出它的$r$辈祖先$j$，那么这若干个连续单词的长度是$j-i$。找出最大长度，输出即可。</li></ul><h3 id="程序-双指针-倍增"><a href="#程序-双指针-倍增" class="headerlink" title="程序(双指针+倍增)"></a>程序(双指针+倍增)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,r,c,len[maxn],sum[maxn],to[maxn],fa[maxn],cur[maxn];</span><br><span class="line"><span class="built_in">string</span> str[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sol</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!num)</span><br><span class="line">&#123;</span><br><span class="line">rep(i,n+<span class="number">1</span>) fa[i]=i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sol(num/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">rep(i,n+<span class="number">1</span>) cur[i]=fa[fa[i]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num%<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">rep(i,n+<span class="number">1</span>) fa[i]=to[cur[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">rep(i,n+<span class="number">1</span>) fa[i]=cur[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;r&gt;&gt;c;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str[i];</span><br><span class="line">len[i]=str[i].size()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) sum[i+<span class="number">1</span>]=sum[i]+len[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;j&lt;=n&amp;&amp;sum[j]-sum[i]&lt;=c+<span class="number">1</span>;j++);</span><br><span class="line">to[i]=--j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sol(r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mx=<span class="number">-1</span>,id=<span class="number">-1</span>;</span><br><span class="line">rep(i,n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(mx&lt;fa[i]-i)</span><br><span class="line">&#123;</span><br><span class="line">mx=fa[i]-i;</span><br><span class="line">id=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(cntr,r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(id==to[id]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">repa(i,id,to[id])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;id) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id=to[id];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-309B-Context-Advertising-题解&quot;&gt;&lt;a href=&quot;#Codeforces-309B-Context-Advertising-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 309B Context Advertising 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/309/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 309B Context Advertising&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n,r,c$和一个由$n$个单词组成的句子(两两单词之间有一个空格)，在这个句子里选出若干个连续的单词，组成一个“矩阵”，行数不能超过$r$，每行字符数不能超过$c$(&lt;strong&gt;包括空格&lt;/strong&gt;)，不能把一个单词拆开。求合法矩阵中，单词数最多的那个矩阵，并输出。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="倍增" scheme="http://yoursite.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1220 Stacks 题解</title>
    <link href="http://yoursite.com/2019/09/07/Ural-1220-Stacks-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/07/Ural-1220-Stacks-题解/</id>
    <published>2019-09-07T02:39:09.000Z</published>
    <updated>2019-09-22T03:03:05.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1220-Stacks-题解"><a href="#Ural-1220-Stacks-题解" class="headerlink" title="Ural 1220 Stacks 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1220" target="_blank" rel="noopener">Ural 1220 Stacks</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>模拟若干个栈。</p><p>给定$n(1\le n\le 10^5)$个操作，每个操作有如下两个类型</p><ul><li><code>PUSH a b</code>，意为把<code>b</code>插入第<code>a</code>个栈中。</li><li><code>POP a</code>，意为输出第<code>a</code>个栈的栈顶元素，并弹出栈顶。</li></ul><p>$1\le a \le 10^3,0\le b\le 10^9$，保证操作无误，内存限制为<code>0.75MB=768KB​</code>。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>纯模拟会<code>MLE</code>(不知道有没有神仙可以卡过去)，不管是<code>vector</code>，<code>stack</code>还是其它的。</p><p>很容易想到用静态链表$v$维护，把所有的元素存储在同一个数组：</p><ul><li>$v_i$有一个指针$p_i$指向这个栈中前一个元素。</li><li>每个栈有$l_i$表示栈顶元素的下标。</li></ul><p>但是这样仍然会<code>MLE</code>。</p><p>把$p$数组的类型换成<code>unsigned short</code>($[0,65536]$)，观察到$0\le v_i$。</p><p>若$p_i&gt;65536$，让$v_i=-v_i$，$p_i=p_i-65536$。</p><p>执行<code>POP</code>操作时转换一下即可。</p><p>Tip: <code>G++ 7.1</code>还是<code>MLE</code>(<code>796KB</code>)，选用<code>Visual C++ 2017</code>可以通过(<code>760KB</code>)。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100001</span>,maxm=<span class="number">1001</span>,maxnum=<span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a,b,v[maxn],len,lst[maxm];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> poi[maxn];</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,op,&amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">'U'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">v[len++]=b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id=len<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lst[a]&gt;maxnum)</span><br><span class="line">&#123;</span><br><span class="line">poi[id]=lst[a]-maxnum;</span><br><span class="line">v[id]=-v[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> poi[id]=lst[a];</span><br><span class="line"></span><br><span class="line">lst[a]=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">abs</span>(v[lst[a]]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(v[lst[a]]&lt;<span class="number">0</span>) lst[a]=poi[lst[a]]+maxnum; <span class="keyword">else</span> lst[a]=poi[lst[a]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1220-Stacks-题解&quot;&gt;&lt;a href=&quot;#Ural-1220-Stacks-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1220 Stacks 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1220&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1220 Stacks&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;模拟若干个栈。&lt;/p&gt;
&lt;p&gt;给定$n(1\le n\le 10^5)$个操作，每个操作有如下两个类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PUSH a b&lt;/code&gt;，意为把&lt;code&gt;b&lt;/code&gt;插入第&lt;code&gt;a&lt;/code&gt;个栈中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POP a&lt;/code&gt;，意为输出第&lt;code&gt;a&lt;/code&gt;个栈的栈顶元素，并弹出栈顶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$1\le a \le 10^3,0\le b\le 10^9$，保证操作无误，内存限制为&lt;code&gt;0.75MB=768KB​&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="静态链表" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/"/>
    
      <category term="卡内存" scheme="http://yoursite.com/tags/%E5%8D%A1%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1218 Episode N-th: The Jedi Tournament 题解</title>
    <link href="http://yoursite.com/2019/09/04/Ural-1218-Episode-N-th-The-Jedi-Tournament-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/04/Ural-1218-Episode-N-th-The-Jedi-Tournament-题解/</id>
    <published>2019-09-04T14:22:21.000Z</published>
    <updated>2019-09-22T03:05:09.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1218-Episode-N-th-The-Jedi-Tournament-题解"><a href="#Ural-1218-Episode-N-th-The-Jedi-Tournament-题解" class="headerlink" title="Ural 1218 Episode N-th: The Jedi Tournament 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1218" target="_blank" rel="noopener">Ural 1218 Episode N-th: The Jedi Tournament</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n(1\le n\le 20)$个玩家，每个玩家有一个字符串名字和三个整数值(所有玩家的数值都不同)。对于玩家$i$和$j$，如果玩家$i$的三个值中至少有两个值大于玩家$j$的对应值，则$i$玩家可以淘汰$j$玩家。一个玩家胜利了就是他淘汰了所有人。你可以随意安排赛程，输出那些至少胜利了一次的玩家的名字(按照输入的顺序输出)。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>构图。若$i$玩家可以淘汰$j$玩家，则从$i$连一条有向边到$j$。问题转化成：如果从$i$开始，能找到一条长度为$n-1$的路径，那么他胜利了。</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法$1$"></a>方法$1$</h4><p>无脑暴力DFS。边数$n^2$，点数$n$，时间复杂度为$O(n^3)$。妥妥的<code>TLE</code>。</p><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法$2$"></a>方法$2$</h4><p>强连通分量缩点。因为在同一个强连通分量中，任意一个点都可以淘汰(这个强连通分量中)其它的点。缩点后，图变成一个<code>DAG</code>，而入度为$0$的那个强连通分量中，任意一个点都可以淘汰(整个图中)其它的点。输出那个强连通分量里所有的点即可。</p><h3 id="方法-2-程序"><a href="#方法-2-程序" class="headerlink" title="方法$2$程序"></a>方法$2$程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">210</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn],c[maxn],tim,dfn[maxn],low[maxn],sta[maxn],ind,cscc,scc[maxn],deg[maxn];</span><br><span class="line"><span class="built_in">string</span> jedi[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++tim;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">sta[++ind]=x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=e[x][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dfn[y])</span><br><span class="line">&#123;</span><br><span class="line">Tarjan(y);</span><br><span class="line">low[x]=min(low[x],low[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[y]) low[x]=min(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// printf("%d ",sta[ind]);</span></span><br><span class="line">scc[sta[ind]]=cscc;</span><br><span class="line">vis[sta[ind--]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(x!=sta[ind+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">cscc++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf("\n");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;jedi[i]&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) rep(j,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j]) cnt++;</span><br><span class="line"><span class="keyword">if</span>(b[i]&gt;b[j]) cnt++;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;c[j]) cnt++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>) e[i].push_back(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) <span class="keyword">if</span>(!dfn[i]) Tarjan(i);</span><br><span class="line"></span><br><span class="line">rep(i,n) repV(j,e[i]) <span class="keyword">if</span>(scc[i]!=scc[j]) deg[scc[j]]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> deg0;</span><br><span class="line">rep(i,cscc) <span class="keyword">if</span>(deg[i]==<span class="number">0</span>) deg0=i;</span><br><span class="line"></span><br><span class="line">rep(i,n) <span class="keyword">if</span>(scc[i]==deg0) <span class="built_in">cout</span>&lt;&lt;jedi[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1218-Episode-N-th-The-Jedi-Tournament-题解&quot;&gt;&lt;a href=&quot;#Ural-1218-Episode-N-th-The-Jedi-Tournament-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1218 Episode N-th: The Jedi Tournament 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1218&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1218 Episode N-th: The Jedi Tournament&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n(1\le n\le 20)$个玩家，每个玩家有一个字符串名字和三个整数值(所有玩家的数值都不同)。对于玩家$i$和$j$，如果玩家$i$的三个值中至少有两个值大于玩家$j$的对应值，则$i$玩家可以淘汰$j$玩家。一个玩家胜利了就是他淘汰了所有人。你可以随意安排赛程，输出那些至少胜利了一次的玩家的名字(按照输入的顺序输出)。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="强连通分量" scheme="http://yoursite.com/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="缩点" scheme="http://yoursite.com/tags/%E7%BC%A9%E7%82%B9/"/>
    
      <category term="Tarjan" scheme="http://yoursite.com/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1217 Unlucky Tickets 题解</title>
    <link href="http://yoursite.com/2019/09/03/Ural-1217-Unlucky-Tickets-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/03/Ural-1217-Unlucky-Tickets-题解/</id>
    <published>2019-09-03T13:51:06.000Z</published>
    <updated>2019-09-22T03:06:18.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1217-Unlucky-Tickets-题解"><a href="#Ural-1217-Unlucky-Tickets-题解" class="headerlink" title="Ural 1217 Unlucky Tickets 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1217" target="_blank" rel="noopener">Ural 1217 Unlucky Tickets</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n(2\le n\le 20)$($n$是偶数)，求出在所有$n$位数中(可以有前导零)，前一半数码的和 与 后一半数码的和相等<strong>或</strong>在奇数位上的数码的和 与 在偶数位上的数码和相等 的个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑DP。</p><p>$f(i,j,k)$表示在前$i$位，前一半数码的和 减去 后一半数码的和的为$j$，在奇数位上的数码的和 减去 在偶数位上的数码和为$k$ 的个数。</p><p>Tip: $j$不可能为负数，而$k$有可能为负数，所以写的时候要把$k$变成非负数，即$f(i,j,k+base)$。</p><ul><li><strong>初始值</strong>：$f(0,0,0)=1$。</li><li><p><strong>状态转移方程</strong>：</p><p>设当前状态为$f(i,j,k)$，需转移到的状态为$f(i’,j’,k’)$，$i’$位上放的数是$x$。</p><p>$i’=i+1$。</p><p>若$i’&gt;n/2$且$x&gt;j$($j’$位负数)，跳出关于$x$的循环。</p><p>若$i’\le n/2$，$j’=j+x$；否则$j’=j-x$。</p><p>若$i’\%2=1$，$k’=k+x$；否则$k’=k-x$。</p><p>$f(i’,j’,k’)+=f(i,j,k)$即可。</p></li><li><p><strong>答案</strong>：$f(n,0,0)$。</p></li></ul><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">25</span>,base=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL dp[maxn][base+<span class="number">10</span>][base*<span class="number">2</span>+<span class="number">10</span>];</span><br><span class="line"><span class="comment">// dp[numbers of digits][the first half - the last half][digits on the odd positions - the digits on the even positions]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][base]=<span class="number">1</span>;</span><br><span class="line">rep(i,n) rep(j,base+<span class="number">1</span>) repa1(k,<span class="number">-200</span>,<span class="number">200</span>) <span class="keyword">if</span>(dp[i][j][k+base])</span><br><span class="line">&#123;</span><br><span class="line">rep(x,<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ci=i+<span class="number">1</span>,cj=j,ck=k;</span><br><span class="line"><span class="keyword">if</span>(ci&gt;n/<span class="number">2</span>&amp;&amp;x&gt;j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ci&lt;=n/<span class="number">2</span>) cj+=x; <span class="keyword">else</span> cj-=x;</span><br><span class="line"><span class="keyword">if</span>(ci%<span class="number">2</span>) ck+=x; <span class="keyword">else</span> ck-=x;</span><br><span class="line"></span><br><span class="line">dp[ci][cj][ck+base]+=dp[i][j][k+base];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,dp[n][<span class="number">0</span>][base]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1217-Unlucky-Tickets-题解&quot;&gt;&lt;a href=&quot;#Ural-1217-Unlucky-Tickets-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1217 Unlucky Tickets 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1217&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1217 Unlucky Tickets&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n(2\le n\le 20)$($n$是偶数)，求出在所有$n$位数中(可以有前导零)，前一半数码的和 与 后一半数码的和相等&lt;strong&gt;或&lt;/strong&gt;在奇数位上的数码的和 与 在偶数位上的数码和相等 的个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>头文件和宏定义</title>
    <link href="http://yoursite.com/2019/09/02/%E5%A4%B4%E6%96%87%E4%BB%B6%E5%92%8C%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/2019/09/02/头文件和宏定义/</id>
    <published>2019-09-02T13:47:29.000Z</published>
    <updated>2019-11-10T03:29:37.534Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Sir-kay的头文件与宏定义</strong></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-x:x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL res=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)res=res*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> res%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Sir-kay的头文件与宏定义&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>agc029C Lexicographic constraints 题解</title>
    <link href="http://yoursite.com/2019/08/31/agc029C-Lexicographic-constraints-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/31/agc029C-Lexicographic-constraints-题解/</id>
    <published>2019-08-31T14:18:58.000Z</published>
    <updated>2019-09-02T13:42:21.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="agc029C-Lexicographic-constraints-题解"><a href="#agc029C-Lexicographic-constraints-题解" class="headerlink" title="agc029C Lexicographic constraints 题解"></a><a href="https://agc029.contest.atcoder.jp/tasks/agc029_c" target="_blank" rel="noopener">agc029C Lexicographic constraints</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p> 有$n$个字符串，分别为$S_1,S_2,\dots,S_n$，$S_i$的长度为$A_i(1\le i\le n)$。给定$n$和$A$，求用最少个数的字符组成$S_1,S_2,\dots,S_n$，使得$S_1&lt;S_2&lt;\dots&lt;S_n$(字典序)。输出这个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>贪心。对于每一个字符串，必须选择可选字符串中字典序最小的一个。</p><p><u>反证法：如果不选字典序最小的一个，答案肯定不会更优。</u></p><p>设每个字符为$0\sim\inf$中的一个数字。</p><p>所以</p><script type="math/tex; mode=display">S_1=\begin{matrix} \underbrace{0\dots0} \\ A_1\end{matrix}</script><p>已知$S_{i-1}$如何求$S_i(2\le i\le n)$呢。</p><ul><li>$A_i&gt;A_{i-1}$时，<script type="math/tex; mode=display">S_i=S_{i-1}+\begin{matrix} \underbrace{0\dots0} \\ A_i-A_{i-1}\end{matrix}</script></li><li>$A_i\le A_{i-1}$时，$S_i=S_{i-1}$的前$A_i$位，且$S_i$的最后一位加$1$，然后“进位”(如果当前位的值超出字符集的大小，就把当前位设置位$0$，前一位加$1$)。</li></ul><p>这里需要知道字符集大小。考虑二分，因为字符集大小是满足单调性的。<code>check</code>函数：“进位”时如果进到$-1$位了，就不可行。</p><p><u>证明：如果字符集大小位$m$，则字符集大小为$m+1$一定可行，而字符集大小为$m-1$不一定可行。</u></p><p><strong>问题：字符串长度最大为$10^9$，不能维护整个字符串。</strong></p><p>解法$1$：用一个<code>map&lt;int,int&gt;</code>表示第几位放的是什么字符。观察发现：字符串中大部分的字符为$0$，所以只维护字符不为$0$位就可以了。</p><p>Tip: 需要特判$A_1&lt;A_2&lt;\dots&lt;A_n$的情况，否则前$3$个点会<code>TLE</code>。</p><p>解法$2$：同样，字符串中大部分的字符为$0$，可以用一个<code>vector&lt;pair&lt;int,int&gt; &gt;</code>维护，<code>&lt;a,b&gt;</code>表示字符为<code>a</code>，出现了<code>b</code>次的字符串，存在<code>vector</code>里即可表达整个字符串。这个方法写起来会更麻烦一点。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法$1$"></a>解法$1$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">str.clear();</span><br><span class="line"></span><br><span class="line">rep(i,n)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;len)</span><br><span class="line">&#123;</span><br><span class="line">len=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!str.empty()&amp;&amp;str.rbegin()-&gt;fs&gt;=a[i]) str.erase(str.rbegin()-&gt;fs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cur=a[i]<span class="number">-1</span>;</span><br><span class="line">str[cur]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(str[cur]&gt;=x)</span><br><span class="line">&#123;</span><br><span class="line">str.erase(cur);</span><br><span class="line">str[--cur]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,n) SF(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f=<span class="number">1</span>;</span><br><span class="line">rep1(i,n<span class="number">-1</span>) <span class="keyword">if</span>(a[i]&lt;=a[i<span class="number">-1</span>]) f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(f) <span class="keyword">return</span> !PF(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">2</span>,r=n+<span class="number">1</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法$2$"></a>解法$2$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],alp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getlen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">repV(i,v) len+=i.sc;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getlast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v.back().fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushstr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!v.empty()&amp;&amp;x==getlast()) v.back().sc+=cnt; <span class="keyword">else</span> v.push_back(&#123;x,cnt&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">transform</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=getlen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur&lt;len)</span><br><span class="line">&#123;</span><br><span class="line">pushstr(<span class="number">0</span>,len-cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!v.empty()&amp;&amp;cur-v.back().sc&gt;=len)</span><br><span class="line">&#123;</span><br><span class="line">cur-=v.back().sc;</span><br><span class="line">v.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">v.back().sc-=cur-len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!v.empty()&amp;&amp;getlast()==alp<span class="number">-1</span>) v.pop_back();</span><br><span class="line"><span class="keyword">if</span>(v.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x=getlast()+<span class="number">1</span>;v.back().sc--;</span><br><span class="line"><span class="keyword">if</span>(!v.back().sc) v.pop_back();</span><br><span class="line"></span><br><span class="line">pushstr(x,<span class="number">1</span>);</span><br><span class="line">pushstr(<span class="number">0</span>,len-getlen());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.clear();</span><br><span class="line">rep(i,n) <span class="keyword">if</span>(!transform(a[i])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,n) SF(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n+<span class="number">1</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">alp=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check()) r=alp; <span class="keyword">else</span> l=alp+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;agc029C-Lexicographic-constraints-题解&quot;&gt;&lt;a href=&quot;#agc029C-Lexicographic-constraints-题解&quot; class=&quot;headerlink&quot; title=&quot;agc029C Lexicographic constraints 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://agc029.contest.atcoder.jp/tasks/agc029_c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;agc029C Lexicographic constraints&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt; 有$n$个字符串，分别为$S_1,S_2,\dots,S_n$，$S_i$的长度为$A_i(1\le i\le n)$。给定$n$和$A$，求用最少个数的字符组成$S_1,S_2,\dots,S_n$，使得$S_1&amp;lt;S_2&amp;lt;\dots&amp;lt;S_n$(字典序)。输出这个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AtCoder" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/AtCoder/"/>
    
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
</feed>
