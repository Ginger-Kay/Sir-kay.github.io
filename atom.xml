<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sir-kay</title>
  
  <subtitle>Think Once, Debug More. Think More, Debug Once.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-21T11:30:55.494Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sir-kay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Codeforces 1238D AB-string 题解</title>
    <link href="http://yoursite.com/2019/10/21/Codeforces-1238D-AB-string-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/21/Codeforces-1238D-AB-string-题解/</id>
    <published>2019-10-21T10:18:42.000Z</published>
    <updated>2019-10-21T11:30:55.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1238D-AB-string-题解"><a href="#Codeforces-1238D-AB-string-题解" class="headerlink" title="Codeforces 1238D AB-string 题解"></a>Codeforces 1238D AB-string 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个字符串$s$如果 它的每一个字符都属于至少一个长度大于$1$的回文子串，那么称$s$是“好的”。如<code>AABBB</code>,<code>ABAA</code>,<code>AAAAA</code>是好的。</p><p>给定一个长度为$n (1\le n\le 3\cdot10^5)$的字符串$s$，求出$s$中好的子串的个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设一个字符串$t$由$t_1\dots t_n$组成，则$\forall 1&lt;i&lt;n$，$t_i$属于一个回文子串(默认长度大于$1$，以下同理)。</p><p>证明：设$i$满足$1&lt;i&lt;n$，</p><ul><li>若$t_i=t_{i-1}$，则它属于回文串$t_{i-1}t_i$。</li><li>若$t_i=t_{i+1}$，则它属于回文串$t_it_{i+1}$。</li><li>若$t_i\neq t_{i-1},t_i\neq t_{i+1}$，那么$t_{i-1}=t_{i+1}$，则它属于回文串$t_{i-1}t_it_{i+1}$。</li></ul><p>那么，只有当$i=1$或$i=n$时，$t_i$才有可能不属于一个回文子串。</p><p>下面考虑$t_1$不属于一个回文子串的情况。</p><ul><li>$t_2\neq t_1$，否则$t_1$属于回文串$t_1t_2$。</li><li>$\forall i&gt;2$，$t_i\neq t_{i-1}$，否则$t_1$属于回文串$t_1\dots t_i$</li></ul><p>$t_n$同理。</p><p>所以，$t$只有形如以下四种字符串时，$t$不是好的。</p><ul><li><code>AB...B</code></li><li><code>BA...A</code></li><li><code>A...AB</code></li><li><code>B...BA</code></li></ul><p>给定$s$，求$s$中好的字串的个数，那么就可以转化为 所有字串-不是好的字串，即$\frac{n\times(n-1)}{2}-cnt$，$cnt$为不是好的子串。</p><p>显然，$cnt$可以$O(n)$求出。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line"></span><br><span class="line">ans=<span class="number">1l</span>l*n*(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++) <span class="keyword">if</span>(s[j]!=s[i]) ans-=(j==i+<span class="number">1</span>?<span class="number">0</span>:<span class="number">1</span>); <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">repd(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--) <span class="keyword">if</span>(s[j]!=s[i]) ans--; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure><p>Tip: 这个程序看似是$O(n^2)$的，实际上是$O(n)$的。这里不再赘述。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1238D-AB-string-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1238D-AB-string-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1238D AB-string 题解&quot;&gt;&lt;/a&gt;Codeforces 1238D AB-string 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;一个字符串$s$如果 它的每一个字符都属于至少一个长度大于$1$的回文子串，那么称$s$是“好的”。如&lt;code&gt;AABBB&lt;/code&gt;,&lt;code&gt;ABAA&lt;/code&gt;,&lt;code&gt;AAAAA&lt;/code&gt;是好的。&lt;/p&gt;
&lt;p&gt;给定一个长度为$n (1\le n\le 3\cdot10^5)$的字符串$s$，求出$s$中好的子串的个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 343C Read Time 题解</title>
    <link href="http://yoursite.com/2019/10/15/Codeforces-343C-Read-Time-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/15/Codeforces-343C-Read-Time-题解/</id>
    <published>2019-10-15T13:10:31.000Z</published>
    <updated>2019-10-15T13:33:34.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-343C-Read-Time-题解"><a href="#Codeforces-343C-Read-Time-题解" class="headerlink" title="Codeforces 343C Read Time 题解"></a>Codeforces 343C Read Time 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在一个无限长的线性磁盘上，有$n$个<strong>独立</strong>的磁头和$m$个需读取的位置$(1\le n,m\le 10^5)$，第$i$个磁头的初始位置为$h_i (1\le h_i\le 10^{10},h_i&lt;h_{i+1})$，第$j$个需读取位置为$p_j (1\le p_j\le 10^{10},p_j&lt;p_{j+1})$，需读取的位置互不相同的。</p><p><img src="https://codeforces.com/predownloaded/82/ea/82ea119f119277c71e28c458bd2febd9134ba7ad.png" alt="n=3,m=4,h=[2,5,6],p=[1,3,6,8]"></p><p>每一个磁头可以花一个单位时间移动到左边或右边的位置，也可以不动。可以有多个磁头在同一位置。每个磁头可以读取无限多个位置。一个位置被至少一个磁头走过后，它就被读取了。特别，一开始时，$h_i (1\le i\le n)$的位置就被读取过了。</p><p>求读取所有需读取位置需要的最少时间。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑二分需要的时间。</p><p>对于<code>check(time)</code>函数，每个磁头都有<code>time</code>单位个时间。</p><p>设当前考虑的磁头为第$i$个磁头，设$pos$为 第$i-1$个磁头没有完成的最左边的需读取位置，那么它要在读取$pos$后，尽可能地多读取位置。</p><p>确定尽可能向后读取的位置有两种，设走到$pos$后，还剩$r$个单位时间。</p><ul><li><p>先走到$pos$，再用$r$个时间尽可能地多读取位置。</p></li><li><p>先用$\frac{r}{2}$个时间尽可能地多读取位置(用$\frac{r}{2}$个时间走回来)，再走到$pos$。</p></li></ul><p>在$p$中<code>upper_bound(MAX)</code>后，就可以找到第$i$个磁头没有完成的最左边的需读取位置了。</p><p>所以<code>check</code>函数的时间复杂度是$O(n\log n)$。</p><p>Tip: 还有一种方法可以使<code>check</code>函数的时间复杂度是$O(n)$，具体不再赘述。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LL h[maxn],p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(LL x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pos=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">rep1(i,n)</span><br><span class="line">&#123;</span><br><span class="line">LL rem=x-<span class="built_in">abs</span>(h[i]-p[pos]);</span><br><span class="line"><span class="keyword">if</span>(rem&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">pos=upper_bound(p+<span class="number">1</span>,p+m+<span class="number">1</span>,max(p[pos]+rem,h[i]+rem/<span class="number">2</span>))-p;</span><br><span class="line"><span class="comment">// max(go to read `pos`-&gt;go to read as more as possible tracks , \</span></span><br><span class="line">   go to read as more as possible tracks-&gt;go to read `pos`)</span><br><span class="line"><span class="keyword">if</span>(pos==m+<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;h[i]);</span><br><span class="line">rep1(i,m) SF(<span class="string">"%lld"</span>,&amp;p[i]);</span><br><span class="line"></span><br><span class="line">LL l=<span class="number">0</span>,r=<span class="number">1e18</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">LL mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-343C-Read-Time-题解&quot;&gt;&lt;a href=&quot;#Codeforces-343C-Read-Time-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 343C Read Time 题解&quot;&gt;&lt;/a&gt;Codeforces 343C Read Time 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;在一个无限长的线性磁盘上，有$n$个&lt;strong&gt;独立&lt;/strong&gt;的磁头和$m$个需读取的位置$(1\le n,m\le 10^5)$，第$i$个磁头的初始位置为$h_i (1\le h_i\le 10^{10},h_i&amp;lt;h_{i+1})$，第$j$个需读取位置为$p_j (1\le p_j\le 10^{10},p_j&amp;lt;p_{j+1})$，需读取的位置互不相同的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://codeforces.com/predownloaded/82/ea/82ea119f119277c71e28c458bd2febd9134ba7ad.png&quot; alt=&quot;n=3,m=4,h=[2,5,6],p=[1,3,6,8]&quot;&gt;&lt;/p&gt;
&lt;p&gt;每一个磁头可以花一个单位时间移动到左边或右边的位置，也可以不动。可以有多个磁头在同一位置。每个磁头可以读取无限多个位置。一个位置被至少一个磁头走过后，它就被读取了。特别，一开始时，$h_i (1\le i\le n)$的位置就被读取过了。&lt;/p&gt;
&lt;p&gt;求读取所有需读取位置需要的最少时间。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 343B Alternating Current 题解</title>
    <link href="http://yoursite.com/2019/10/15/Codeforces-343B-Alternating-Current-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/15/Codeforces-343B-Alternating-Current-题解/</id>
    <published>2019-10-15T13:10:04.000Z</published>
    <updated>2019-10-15T13:33:20.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-343B-Alternating-Current-题解"><a href="#Codeforces-343B-Alternating-Current-题解" class="headerlink" title="Codeforces 343B Alternating Current 题解"></a>Codeforces 343B Alternating Current 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有两根长度为$n (1\le n\le 10^5)$个单位，两头固定的电线，它们缠绕在一起，给定一个长为$n$，由<code>+</code>和<code>-</code>组成的字符串$s$，其中</p><ul><li><p>若$s_i$为<code>+</code>，则在第$i$个单位长度时，第一根电线在第二根电线上。</p></li><li><p>若$s_i$为<code>-</code>，则在第$i$个单位长度时，第二根电线在第一根电线上。</p></li></ul><p><img src="https://codeforces.com/predownloaded/33/7c/337c85cb33b214e0e8437a4d03da7ec71eb11596.png" alt="n=4,s=&quot;-++-&quot;"></p><p>求不拔出电线且不移动装置时，是否能解开它们。若可以，输出<code>Yes</code>；否则输出<code>No</code>。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据题意知道：若两个<code>+</code>或两个<code>-</code>连在一起时，则那两个单位长度可以解开。</p><p>那么如果删去了所有的<code>++</code>和<code>--</code>后，字符串为空，则可以解开；否则不可以。</p><p>因为$1\le n\le 10^5$，所以程序的时间复杂度不能是$O(n^2)$，在字符串中暴力删除肯定不行。</p><p>考虑$O(n)$的做法。若当前长度为$i$，字符$s_i (0&lt;i\le n)$等于$s_{i-1}$，则使$i=i-2$。这样删去后 后面的字符也可以和前面的字符配成<code>++</code>或<code>--</code>，符合题目要求。判断有没有删完即可。</p><p>使用<code>stack</code>可以使程序更简洁。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; sta;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">repV(i,s) <span class="keyword">if</span>(!sta.empty()&amp;&amp;sta.top()==i) sta.pop(); <span class="keyword">else</span> sta.push(i);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(sta.empty()?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-343B-Alternating-Current-题解&quot;&gt;&lt;a href=&quot;#Codeforces-343B-Alternating-Current-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 343B Alternating Current 题解&quot;&gt;&lt;/a&gt;Codeforces 343B Alternating Current 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;有两根长度为$n (1\le n\le 10^5)$个单位，两头固定的电线，它们缠绕在一起，给定一个长为$n$，由&lt;code&gt;+&lt;/code&gt;和&lt;code&gt;-&lt;/code&gt;组成的字符串$s$，其中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;若$s_i$为&lt;code&gt;+&lt;/code&gt;，则在第$i$个单位长度时，第一根电线在第二根电线上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若$s_i$为&lt;code&gt;-&lt;/code&gt;，则在第$i$个单位长度时，第二根电线在第一根电线上。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://codeforces.com/predownloaded/33/7c/337c85cb33b214e0e8437a4d03da7ec71eb11596.png&quot; alt=&quot;n=4,s=&amp;quot;-++-&amp;quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;求不拔出电线且不移动装置时，是否能解开它们。若可以，输出&lt;code&gt;Yes&lt;/code&gt;；否则输出&lt;code&gt;No&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 343A Rational Resistance 题解</title>
    <link href="http://yoursite.com/2019/10/15/Codeforces-343A-Rational-Resistance-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/15/Codeforces-343A-Rational-Resistance-题解/</id>
    <published>2019-10-15T13:09:08.000Z</published>
    <updated>2019-10-15T13:33:06.950Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-343A-Rational-Resistance-题解"><a href="#Codeforces-343A-Rational-Resistance-题解" class="headerlink" title="Codeforces 343A Rational Resistance 题解"></a>Codeforces 343A Rational Resistance 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>你有很多个电阻器，一个电阻器$R_0$的电阻是$1$。</p><p>设一个电阻元件的电阻为$R$，可以由以下三种方式得到一个电阻元件</p><ul><li>一个电阻器，则$R=R_0$。</li><li>一个电阻元件(电阻为$R_e$)串联一个电阻器，则$R=R_e+R_0$。</li><li>一个电阻元件(电阻为$R_e$)并联一个电阻器，则$R=\frac{1}{\frac{1}{R_e}+\frac{1}{R_0}}$。</li></ul><p><img src="https://codeforces.com/predownloaded/59/16/591632416583be376234349922646b3cb38701f4.png" alt></p><p>给定一个最简分数$\frac{a}{b} (1\le a,b\le 10^{18})$，求至少要多少个电阻器 使得 得到的电阻元件的电阻为$\frac{a}{b}$。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>设有一个电阻元件的电阻为$\frac{x}{y}$。</p><ul><li><p>串联后电阻为$\frac{x}{y}+1=\frac{x+y}{y}$。</p></li><li><p>并联后电阻为$\frac{1}{\frac{1}{\frac{x}{y}}+1}=\frac{x}{x+y}$。</p></li></ul><p>那么</p><ul><li><p>若$x&gt;y$，则$\frac{x}{y}$是由$\frac{x-y}{y}$ 串联得出的。</p></li><li><p>若$x&lt;y$，则$\frac{x}{y}$是由$\frac{x}{y-x}$ 并联得出的。</p></li></ul><p>这样用大的数减小的数，就是辗转相减法，每减一次，答案加$1$。</p><p>但是数据范围太大，可以把辗转相减法转换成辗转相除法，每除一次，答案加 大数整除小数的结果。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=INF;</span><br><span class="line"></span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sol</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b) <span class="keyword">return</span>;</span><br><span class="line">ans+=a/b;</span><br><span class="line">sol(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL a,b;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;a,&amp;b);</span><br><span class="line"></span><br><span class="line">sol(a,b);</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-343A-Rational-Resistance-题解&quot;&gt;&lt;a href=&quot;#Codeforces-343A-Rational-Resistance-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 343A Rational Resistance 题解&quot;&gt;&lt;/a&gt;Codeforces 343A Rational Resistance 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;你有很多个电阻器，一个电阻器$R_0$的电阻是$1$。&lt;/p&gt;
&lt;p&gt;设一个电阻元件的电阻为$R$，可以由以下三种方式得到一个电阻元件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个电阻器，则$R=R_0$。&lt;/li&gt;
&lt;li&gt;一个电阻元件(电阻为$R_e$)串联一个电阻器，则$R=R_e+R_0$。&lt;/li&gt;
&lt;li&gt;一个电阻元件(电阻为$R_e$)并联一个电阻器，则$R=\frac{1}{\frac{1}{R_e}+\frac{1}{R_0}}$。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://codeforces.com/predownloaded/59/16/591632416583be376234349922646b3cb38701f4.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;给定一个最简分数$\frac{a}{b} (1\le a,b\le 10^{18})$，求至少要多少个电阻器 使得 得到的电阻元件的电阻为$\frac{a}{b}$。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1228F One Node is Gone 题解</title>
    <link href="http://yoursite.com/2019/10/02/Codeforces-1228F-One-Node-is-Gone-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/10/02/Codeforces-1228F-One-Node-is-Gone-题解/</id>
    <published>2019-10-02T13:14:08.000Z</published>
    <updated>2019-10-03T02:30:25.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1228F-One-Node-is-Gone-题解"><a href="#Codeforces-1228F-One-Node-is-Gone-题解" class="headerlink" title="Codeforces 1228F One Node is Gone 题解"></a><a href="https://codeforces.com/contest/1228/problem/F" target="_blank" rel="noopener">Codeforces 1228F One Node is Gone</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n (1\le n\le17)$，定义<em>McDic’s generation</em>为</p><ol><li>建一个有$2^n-1$个结点的满二叉树</li><li>从这个二叉树中选择一个非根结点$v$</li><li>把$v$从树中删除，从$v$的父亲到$v$的儿子连边，如果$v$没有儿子，那么就不连边。</li></ol><p>现在给定一棵树，判断这棵树是否可以经过<em>McDic’s generation</em>一次得到。如果可以，输出被删除的结点的父亲。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先，要找到这棵树的根。我们知道，一棵满二叉树的根结点在它的直径的中间，而删除一个结点后，根在直径的位置可能会偏移$1$个，为了保险，可以假设它偏移了$2$个位置。把这$5$个结点当作根，进行<code>DFS</code>。</p><p>设当前点为$x$，$cnt$为$x$的儿子个数，<code>DFS(x)</code>的返回值为一个<code>pair&lt;int,int&gt;</code>，其中：</p><ol><li>如果以$x$为根的子树非法，返回<code>{0,-1}</code></li><li>如果以$x$为根的子树为一个满二叉树，返回<code>{1,x离叶子结点的距离}</code></li><li>如果被删除的结点在以$x$为根的子树内，返回<code>{2,x离叶子结点的距离}</code></li></ol><p>很容易知道，如果<code>cnt&gt;3</code>，则返回<code>{0,-1}</code>；如果<code>cnt=0</code>，则它是叶子结点，返回<code>{1,0}</code>。</p><p>如果$x$不为以上两种情况，<code>DFS</code>它的儿子$y$，设<code>DFS(y)</code>的返回值为$got$</p><ol><li><p>如果<code>got.first=0</code>，则以$x$为根的子树也非法，返回<code>{0,-1}</code></p></li><li><p>如果<code>got.first=1</code>，则把<code>got.second</code>存入<code>vector&lt;int&gt; valid</code></p></li><li><p>如果<code>got.first=2</code>，则把<code>got.second</code>存入<code>vector&lt;int&gt; spec</code></p></li></ol><p>如果<code>spec.size()&gt;=2</code>，显然非法，返回<code>{0,-1}</code></p><p>对<code>valid</code>排序。</p><p>如果<code>cnt=1</code>，说明被删除的结点是它的叶子结点，</p><ul><li>如果<code>valid.size()=1且valid[0]=0</code>，合法，存储答案并返回<code>2,1</code></li><li>否则返回<code>{0,-1}</code></li></ul><p>如果<code>cnt=2</code>，</p><ul><li><p>如果<code>valid.size()=2且valid[0]=valid[1]</code>，说明它是一个正常的满二叉树，返回<code>{1,valid[0]+1}</code></p></li><li><p>如果<code>valid.size()=1且valid[0]=spec[0]</code>，说明被删除的结点在它的其中一个子树中，返回<code>{2,valid[0]+1}</code></p></li><li><p>否则返回<code>{0,-1}</code></p></li></ul><p>如果<code>cnt=3</code>，</p><ul><li><p>如果<code>valid.size()=3且valid[0]=valid[1]且valid[1]+1=valid[2]</code>，说明它的其中一个儿子被删除了，返回<code>{2,valid[2]+1}</code></p></li><li><p>否则返回<code>{0,-1}</code></p></li></ul><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=(<span class="number">1</span>&lt;&lt;<span class="number">17</span>)+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,par[maxn],ansv;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn],seq,ans;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">getpar</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">par[x]=fa;</span><br><span class="line">pii res=&#123;<span class="number">0</span>,x&#125;;</span><br><span class="line"></span><br><span class="line">repV(y,e[x]) <span class="keyword">if</span>(y!=fa)</span><br><span class="line">&#123;</span><br><span class="line">pii got=getpar(y,x);got.fs++;</span><br><span class="line">res=max(res,got);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pii <span class="title">sol</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa=<span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=e[x].size()-(fa!=<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;<span class="number">3</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; valid,spec;valid.clear();spec.clear();</span><br><span class="line">repV(y,e[x]) <span class="keyword">if</span>(y!=fa)</span><br><span class="line">&#123;</span><br><span class="line">pii got=sol(y,x);</span><br><span class="line"><span class="keyword">if</span>(got.fs==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(got.fs==<span class="number">1</span>) valid.push_back(got.sc);</span><br><span class="line"><span class="keyword">else</span> spec.push_back(got.sc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(spec.size()&gt;=<span class="number">2</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">sort(All(valid));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ansv=x;</span><br><span class="line"><span class="keyword">if</span>(valid.size()==<span class="number">1</span>&amp;&amp;valid[<span class="number">0</span>]==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(valid.size()==<span class="number">2</span>&amp;&amp;valid[<span class="number">0</span>]==valid[<span class="number">1</span>]) <span class="keyword">return</span> &#123;<span class="number">1</span>,valid[<span class="number">0</span>]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(valid.size()==<span class="number">1</span>&amp;&amp;valid[<span class="number">0</span>]==spec[<span class="number">0</span>]) <span class="keyword">return</span> &#123;<span class="number">2</span>,valid[<span class="number">0</span>]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">ansv=x;</span><br><span class="line"><span class="keyword">if</span>(valid.size()==<span class="number">3</span>&amp;&amp;valid[<span class="number">0</span>]==valid[<span class="number">1</span>]&amp;&amp;valid[<span class="number">1</span>]+<span class="number">1</span>==valid[<span class="number">2</span>]) <span class="keyword">return</span> &#123;<span class="number">2</span>,valid[<span class="number">2</span>]+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">n=(<span class="number">1</span>&lt;&lt;n)<span class="number">-2</span>;</span><br><span class="line"></span><br><span class="line">rep(i,n<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y;SF(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">e[x].push_back(y);</span><br><span class="line">e[y].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pii a=getpar(<span class="number">1</span>),b=getpar(a.sc),c=getpar(b.sc);</span><br><span class="line"><span class="keyword">int</span> x=c.sc;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">seq.push_back(x);</span><br><span class="line">x=par[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid=seq.size()/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=mid<span class="number">-2</span>;i&lt;=mid+<span class="number">2</span>;i++) <span class="keyword">if</span>(<span class="number">0</span>&lt;=i&amp;&amp;i&lt;seq.size())</span><br><span class="line">&#123;</span><br><span class="line">pii got=sol(seq[i]);</span><br><span class="line"><span class="keyword">if</span>(got.fs==<span class="number">2</span>) ans.push_back(ansv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(All(ans));ans.erase(unique(All(ans)),ans.end());</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d\n"</span>,ans.size());</span><br><span class="line">repV(i,ans) PF(<span class="string">"%d "</span>,i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1228F-One-Node-is-Gone-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1228F-One-Node-is-Gone-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1228F One Node is Gone 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codeforces.com/contest/1228/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1228F One Node is Gone&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n (1\le n\le17)$，定义&lt;em&gt;McDic’s generation&lt;/em&gt;为&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;建一个有$2^n-1$个结点的满二叉树&lt;/li&gt;
&lt;li&gt;从这个二叉树中选择一个非根结点$v$&lt;/li&gt;
&lt;li&gt;把$v$从树中删除，从$v$的父亲到$v$的儿子连边，如果$v$没有儿子，那么就不连边。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在给定一棵树，判断这棵树是否可以经过&lt;em&gt;McDic’s generation&lt;/em&gt;一次得到。如果可以，输出被删除的结点的父亲。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 609F Frogs and mosquitoes 题解</title>
    <link href="http://yoursite.com/2019/09/21/Codeforces-609F-Frogs-and-mosquitoes-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/21/Codeforces-609F-Frogs-and-mosquitoes-题解/</id>
    <published>2019-09-21T14:42:56.000Z</published>
    <updated>2019-09-22T02:16:37.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-609F-Frogs-and-mosquitoes-题解"><a href="#Codeforces-609F-Frogs-and-mosquitoes-题解" class="headerlink" title="Codeforces 609F Frogs and mosquitoes 题解"></a><a href="http://codeforces.com/contest/609/problem/F" target="_blank" rel="noopener">Codeforces 609F Frogs and mosquitoes</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有$n (1\le n\le 2\cdot10^5)$个青蛙固定在平面直角坐标系中$Ox$的非负半轴上，对于第$i (1\le i\le n)$个青蛙有两个值，分别是$x_i$和$t_i (0\le x_i,t_i\le 10^9)$($x_i$两两不同)，$x_i$代表它的位置，$t_i$代表它的舌头的长度。</p><p>有$m (1\le m\le 2\cdot10^5)$只蚊子也固定在$Ox$的非负半轴上，对于第$i (1\le i\le m)$只蚊子有两个值，分别是$p_i$和$b_i (0\le p_i,b_i\le 10^9)$，$p_i$代表它的位置，$b_i$代表它的大小。</p><p>如果一个青蛙$i$和一只蚊子$j$，满足 $p_j$在区间$[x_i,x_i+t_i]$内，那么青蛙$i$就可以吃掉蚊子$j$，并且<strong>舌头会增长$b_j$</strong>。<strong>如果有多个青蛙可以吃掉同一个蚊子，那么这个蚊子会被$x_i$最小的那个青蛙吃掉。</strong></p><p><strong>蚊子是按照输入的顺序降临的，如果第$i$个蚊子要降临，必须满足 青蛙吃光了<u>可能吃掉</u>的所有蚊子$j (1\le j&lt;i)$。</strong></p><p>问第$i$只青蛙吃掉了多少蚊子和最后它的舌头有多长。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>对于青蛙$i$和$j$，如果$[x_i,x_i+t_i]$包含在$[x_j,x_j+t_j]$中，那么青蛙$i$就永远没有用了。</p><p><u>因为处于区间$[x_i,x_i+t_i]$内的蚊子总会被青蛙$j$吃掉($x_j&lt;x_i$)。</u></p><p>那么大体思路就出来了：</p><ol><li><p>读入青蛙，删除无用的青蛙</p></li><li><p>依次读入蚊子，每次读入蚊子$i$做出以下操作：</p><ol><li>如果蚊子$i$不能被如何青蛙吃掉，那么就丢入一个数据结构中，<code>continue</code>；否则：</li><li>选用处于最左边的青蛙$j$吃掉蚊子$i$。因为此是青蛙$j$的舌头变长了，所以再删除一遍无用的青蛙 并且 查找青蛙$j$可不可以再吃掉蚊子了。<strong>最后</strong>更新青蛙$j$的数据。</li></ol></li><li><p>输出答案</p></li></ol><p>完成这个过程可以用三个<code>set</code>完成，分别维护青蛙的$x_i$，$(x_i+t_i)$和目前没有被吃掉的蚊子，有关查找的操作可以用二分完成，具体见程序。时间复杂度$O(n\log{n}+m\log{m})$。</p><p>也可以用线段树完成。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cnt[maxn];</span><br><span class="line">LL x[maxn],t[maxn],p[maxn],b[maxn];</span><br><span class="line"><span class="built_in">set</span>&lt;pair&lt;LL,<span class="keyword">int</span>&gt; &gt; frl,frr,mos;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">erase_frog</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(frl.find(&#123;x[id],id&#125;)==frl.end()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> it=frl.lower_bound(&#123;x[id]+<span class="number">1</span>,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(it==frl.end()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p=it-&gt;sc;</span><br><span class="line"><span class="keyword">if</span>(x[id]+t[id]&lt;x[p]+t[p]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">frl.erase(it);</span><br><span class="line">frr.erase(&#123;x[p]+t[p],p&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">frog_eat_mosquitoes</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> it=mos.lower_bound(&#123;x[id]+t[id]+<span class="number">1</span>,<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(it==mos.begin()) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">it--;</span><br><span class="line"><span class="keyword">if</span>(it-&gt;fs&lt;x[id]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">t[id]+=b[it-&gt;sc];</span><br><span class="line">cnt[id]++;</span><br><span class="line"></span><br><span class="line">mos.erase(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"></span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;x[i],&amp;t[i]);</span><br><span class="line">frl.insert(&#123;x[i],i&#125;);</span><br><span class="line">frr.insert(&#123;x[i]+t[i],i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) erase_frog(i);</span><br><span class="line"></span><br><span class="line">rep(i,m)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;p[i],&amp;b[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> it=frr.lower_bound(&#123;p[i],<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">if</span>(it==frr.end()||x[it-&gt;sc]&gt;p[i])</span><br><span class="line">&#123;</span><br><span class="line">mos.insert(&#123;p[i],i&#125;);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id=it-&gt;sc;</span><br><span class="line"></span><br><span class="line">frr.erase(&#123;x[id]+t[id],id&#125;);</span><br><span class="line"></span><br><span class="line">t[id]+=b[i];</span><br><span class="line">cnt[id]++;</span><br><span class="line"></span><br><span class="line">frog_eat_mosquitoes(id);</span><br><span class="line">frr.insert(&#123;x[id]+t[id],id&#125;);</span><br><span class="line">erase_frog(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) PF(<span class="string">"%d %lld\n"</span>,cnt[i],t[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-609F-Frogs-and-mosquitoes-题解&quot;&gt;&lt;a href=&quot;#Codeforces-609F-Frogs-and-mosquitoes-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 609F Frogs and mosquitoes 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/609/problem/F&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 609F Frogs and mosquitoes&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;有$n (1\le n\le 2\cdot10^5)$个青蛙固定在平面直角坐标系中$Ox$的非负半轴上，对于第$i (1\le i\le n)$个青蛙有两个值，分别是$x_i$和$t_i (0\le x_i,t_i\le 10^9)$($x_i$两两不同)，$x_i$代表它的位置，$t_i$代表它的舌头的长度。&lt;/p&gt;
&lt;p&gt;有$m (1\le m\le 2\cdot10^5)$只蚊子也固定在$Ox$的非负半轴上，对于第$i (1\le i\le m)$只蚊子有两个值，分别是$p_i$和$b_i (0\le p_i,b_i\le 10^9)$，$p_i$代表它的位置，$b_i$代表它的大小。&lt;/p&gt;
&lt;p&gt;如果一个青蛙$i$和一只蚊子$j$，满足 $p_j$在区间$[x_i,x_i+t_i]$内，那么青蛙$i$就可以吃掉蚊子$j$，并且&lt;strong&gt;舌头会增长$b_j$&lt;/strong&gt;。&lt;strong&gt;如果有多个青蛙可以吃掉同一个蚊子，那么这个蚊子会被$x_i$最小的那个青蛙吃掉。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;蚊子是按照输入的顺序降临的，如果第$i$个蚊子要降临，必须满足 青蛙吃光了&lt;u&gt;可能吃掉&lt;/u&gt;的所有蚊子$j (1\le j&amp;lt;i)$。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;问第$i$只青蛙吃掉了多少蚊子和最后它的舌头有多长。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1119D Frets On Fire 题解</title>
    <link href="http://yoursite.com/2019/09/14/Codeforces-1119D-Frets-On-Fire-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/14/Codeforces-1119D-Frets-On-Fire-题解/</id>
    <published>2019-09-14T15:09:40.000Z</published>
    <updated>2019-09-22T02:23:17.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-1119D-Frets-On-Fire-题解"><a href="#Codeforces-1119D-Frets-On-Fire-题解" class="headerlink" title="Codeforces 1119D Frets On Fire 题解"></a><a href="http://codeforces.com/contest/1119/problem/D" target="_blank" rel="noopener">Codeforces 1119D Frets On Fire</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$和$s_1,s_2,\dots,s_n$，由此得到一个$n\times(10^{18}+1)$的矩阵$f$，其中$f_{i,j}=s_i+j (1\le i\le n,0\le j\le 10^{18})$。</p><p>在样例$1$中，给定$n=6,s=[3,1,4,1,5,9]$，得到</p><script type="math/tex; mode=display">\begin{matrix} \textbf{f} & \textbf{0} & \textbf{1} & \textbf{2} & \textbf{3} & \textbf{4} & \textbf{5} & \textbf{6} & \textbf{7} & \ldots \\ s_1: & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & \dots \\ s_2: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_3: & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & \dots \\ s_4: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_5: & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & \dots \\ s_6: & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 & \dots \end{matrix}</script><p>再给定$q$个查询，每个查询有$L,R$，问第$L$列到第$R$列(以下表达为$[L,R]$)有多少个不同的数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>因为问的是列，所以行的顺序不重要，可以对$s$进行从小到大排序。</p><p>对样例$1$排完序之后矩阵变为</p><script type="math/tex; mode=display">\begin{matrix} \textbf{f} & \textbf{0} & \textbf{1} & \textbf{2} & \textbf{3} & \textbf{4} & \textbf{5} & \textbf{6} & \textbf{7} & \ldots \\ s_1: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_2: & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & \dots \\ s_3: & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 & \dots \\ s_4: & 4 & 5 & 6 & 7 & 8 & 9 & 10 & 11 & \dots \\ s_5: & 5 & 6 & 7 & 8 & 9 & 10 & 11 & 12 & \dots \\ s_6: & 9 & 10 & 11 & 12 & 13 & 14 & 15 & 16 & \dots \end{matrix}</script><p>还有：查询$[L,R]$与查询$[0,R-L]$是等价的。</p><p>定义$r=R-L,w=r+1$。</p><p>考虑当每一行对于整个矩阵即$r=10^{18}$时的贡献。</p><p>对于样例$1$：</p><ul><li>第$1$行贡献了$0$个数$\{\varnothing\}$；</li><li>第$2$行贡献了$2$个数$\{1,2\}$；</li><li>第$3$行贡献了$1$个数$\{3\}$；</li><li>第$4$行贡献了$1$个数$\{4\}$；</li><li>第$5$行贡献了$4$个数$\{5,6,7,8\}$；</li><li>第$6$行贡献了$w$个数$\{9,10,\dots,9+10^{18}\}$。</li></ul><p>很容易发现，第$i (1\le i&lt;n)$行的贡献为$s_{i+1}-s_i$，第$n$行的贡献为$w$。</p><p>对于任意区间$[0,r]$，第$i (1\le i&lt;n)$行的贡献即为$\min\{s_{i+1}-s_i,w\}$，第$n$行的贡献为$w$。</p><p>那么答案即为$\sum_{i=1}^{n-1}{\min\{s_{i+1}-s_i,w\}}+w$。</p><p>问题：时间复杂度为$O(n\cdot q)$。</p><p>解答：设数组$t$，其中$t_i=s_{i+1}-s_i (1\le i&lt;n)$，将$t$从从小到大排序。设$p$为满足$t_p\le w$的最小值(用二分，时间复杂度为$O(\log n)$)，那么答案为$t_1+t_2+\dots+t_p+w\times(n-p)$($t_1+t_2+\dots+t_p$用前缀和求出)。时间复杂度为$O(\log n\cdot q)$。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,q;</span><br><span class="line">LL s[maxn],pre[maxn],L,R;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep1(i,n) SF(<span class="string">"%lld"</span>,&amp;s[i]);</span><br><span class="line"></span><br><span class="line">sort(s+<span class="number">1</span>,s+n+<span class="number">1</span>);</span><br><span class="line">rep1(i,n<span class="number">-1</span>) s[i]=s[i+<span class="number">1</span>]-s[i];</span><br><span class="line"></span><br><span class="line">sort(s+<span class="number">1</span>,s+n);</span><br><span class="line">rep1(i,n<span class="number">-1</span>) pre[i]=pre[i<span class="number">-1</span>]+s[i];</span><br><span class="line"></span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">while</span>(q--)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%lld%lld"</span>,&amp;L,&amp;R);</span><br><span class="line"></span><br><span class="line">LL w=R-L+<span class="number">1</span>;<span class="keyword">int</span> id=lower_bound(s+<span class="number">1</span>,s+n,w)-(s+<span class="number">1</span>);</span><br><span class="line">PF(<span class="string">"%lld "</span>,pre[id]+(n-id)*w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-1119D-Frets-On-Fire-题解&quot;&gt;&lt;a href=&quot;#Codeforces-1119D-Frets-On-Fire-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 1119D Frets On Fire 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/1119/problem/D&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 1119D Frets On Fire&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n$和$s_1,s_2,\dots,s_n$，由此得到一个$n\times(10^{18}+1)$的矩阵$f$，其中$f_{i,j}=s_i+j (1\le i\le n,0\le j\le 10^{18})$。&lt;/p&gt;
&lt;p&gt;在样例$1$中，给定$n=6,s=[3,1,4,1,5,9]$，得到&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\begin{matrix} 
\textbf{f} &amp; \textbf{0} &amp; \textbf{1} &amp; \textbf{2} &amp; \textbf{3} &amp; \textbf{4} &amp; \textbf{5} &amp; \textbf{6} &amp; \textbf{7} &amp; \ldots \\ 
s_1: &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; \dots \\ 
s_2: &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; \dots \\ 
s_3: &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; 11 &amp; \dots \\ 
s_4: &amp; 1 &amp; 2 &amp; 3 &amp; 4 &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; \dots \\ 
s_5: &amp; 5 &amp; 6 &amp; 7 &amp; 8 &amp; 9 &amp; 10 &amp; 11 &amp; 12 &amp; \dots \\ 
s_6: &amp; 9 &amp; 10 &amp; 11 &amp; 12 &amp; 13 &amp; 14 &amp; 15 &amp; 16 &amp; \dots 
\end{matrix}&lt;/script&gt;&lt;p&gt;再给定$q$个查询，每个查询有$L,R$，问第$L$列到第$R$列(以下表达为$[L,R]$)有多少个不同的数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="前缀和" scheme="http://yoursite.com/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 309B Context Advertising 题解</title>
    <link href="http://yoursite.com/2019/09/08/Codeforces-309B-Context-Advertising-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/08/Codeforces-309B-Context-Advertising-题解/</id>
    <published>2019-09-08T02:52:17.000Z</published>
    <updated>2019-09-08T03:35:43.715Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-309B-Context-Advertising-题解"><a href="#Codeforces-309B-Context-Advertising-题解" class="headerlink" title="Codeforces 309B Context Advertising 题解"></a><a href="http://codeforces.com/contest/309/problem/B" target="_blank" rel="noopener">Codeforces 309B Context Advertising</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n,r,c$和一个由$n$个单词组成的句子(两两单词之间有一个空格)，在这个句子里选出若干个连续的单词，组成一个“矩阵”，行数不能超过$r$，每行字符数不能超过$c$(<strong>包括空格</strong>)，不能把一个单词拆开。求合法矩阵中，单词数最多的那个矩阵，并输出。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>题目要求组成一个$r\times c$的矩阵。</p><ul><li>先考虑每行字符数的这个条件。设这个句子为$s_0,s_1,\dots,s_{n-1}$，对于一个单词$i(0\le i&lt; n)$，找出一个最大的$j(i&lt;j\le n)$，满足$|s_i|+|s_{i+1}|+\dots+|s_{j-1}|+(j-i-1)\le c$，从$i$到$j$连一条无向边。这个过程可以用双指针或二分完成。这样，就构造了一棵树。</li><li>再考虑行数这个条件。对于树上每个结点$i$，用倍增求出它的$r$辈祖先$j$，那么这若干个连续单词的长度是$j-i$。找出最大长度，输出即可。</li></ul><h3 id="程序-双指针-倍增"><a href="#程序-双指针-倍增" class="headerlink" title="程序(双指针+倍增)"></a>程序(双指针+倍增)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,r,c,len[maxn],sum[maxn],to[maxn],fa[maxn],cur[maxn];</span><br><span class="line"><span class="built_in">string</span> str[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">sol</span><span class="params">(<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!num)</span><br><span class="line">&#123;</span><br><span class="line">rep(i,n+<span class="number">1</span>) fa[i]=i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sol(num/<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">rep(i,n+<span class="number">1</span>) cur[i]=fa[fa[i]];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(num%<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">rep(i,n+<span class="number">1</span>) fa[i]=to[cur[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">rep(i,n+<span class="number">1</span>) fa[i]=cur[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;r&gt;&gt;c;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str[i];</span><br><span class="line">len[i]=str[i].size()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) sum[i+<span class="number">1</span>]=sum[i]+len[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;j&lt;=n&amp;&amp;sum[j]-sum[i]&lt;=c+<span class="number">1</span>;j++);</span><br><span class="line">to[i]=--j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sol(r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mx=<span class="number">-1</span>,id=<span class="number">-1</span>;</span><br><span class="line">rep(i,n+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span>(mx&lt;fa[i]-i)</span><br><span class="line">&#123;</span><br><span class="line">mx=fa[i]-i;</span><br><span class="line">id=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(cntr,r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(id==to[id]) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">repa(i,id,to[id])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;id) <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;str[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">id=to[id];</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-309B-Context-Advertising-题解&quot;&gt;&lt;a href=&quot;#Codeforces-309B-Context-Advertising-题解&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 309B Context Advertising 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/309/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 309B Context Advertising&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n,r,c$和一个由$n$个单词组成的句子(两两单词之间有一个空格)，在这个句子里选出若干个连续的单词，组成一个“矩阵”，行数不能超过$r$，每行字符数不能超过$c$(&lt;strong&gt;包括空格&lt;/strong&gt;)，不能把一个单词拆开。求合法矩阵中，单词数最多的那个矩阵，并输出。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="双指针" scheme="http://yoursite.com/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
      <category term="倍增" scheme="http://yoursite.com/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1220 Stacks 题解</title>
    <link href="http://yoursite.com/2019/09/07/Ural-1220-Stacks-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/07/Ural-1220-Stacks-题解/</id>
    <published>2019-09-07T02:39:09.000Z</published>
    <updated>2019-09-22T03:03:05.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1220-Stacks-题解"><a href="#Ural-1220-Stacks-题解" class="headerlink" title="Ural 1220 Stacks 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1220" target="_blank" rel="noopener">Ural 1220 Stacks</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>模拟若干个栈。</p><p>给定$n(1\le n\le 10^5)$个操作，每个操作有如下两个类型</p><ul><li><code>PUSH a b</code>，意为把<code>b</code>插入第<code>a</code>个栈中。</li><li><code>POP a</code>，意为输出第<code>a</code>个栈的栈顶元素，并弹出栈顶。</li></ul><p>$1\le a \le 10^3,0\le b\le 10^9$，保证操作无误，内存限制为<code>0.75MB=768KB​</code>。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>纯模拟会<code>MLE</code>(不知道有没有神仙可以卡过去)，不管是<code>vector</code>，<code>stack</code>还是其它的。</p><p>很容易想到用静态链表$v$维护，把所有的元素存储在同一个数组：</p><ul><li>$v_i$有一个指针$p_i$指向这个栈中前一个元素。</li><li>每个栈有$l_i$表示栈顶元素的下标。</li></ul><p>但是这样仍然会<code>MLE</code>。</p><p>把$p$数组的类型换成<code>unsigned short</code>($[0,65536]$)，观察到$0\le v_i$。</p><p>若$p_i&gt;65536$，让$v_i=-v_i$，$p_i=p_i-65536$。</p><p>执行<code>POP</code>操作时转换一下即可。</p><p>Tip: <code>G++ 7.1</code>还是<code>MLE</code>(<code>796KB</code>)，选用<code>Visual C++ 2017</code>可以通过(<code>760KB</code>)。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100001</span>,maxm=<span class="number">1001</span>,maxnum=<span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a,b,v[maxn],len,lst[maxm];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> poi[maxn];</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s%d"</span>,op,&amp;a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">1</span>]==<span class="string">'U'</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">v[len++]=b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> id=len<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(lst[a]&gt;maxnum)</span><br><span class="line">&#123;</span><br><span class="line">poi[id]=lst[a]-maxnum;</span><br><span class="line">v[id]=-v[id];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> poi[id]=lst[a];</span><br><span class="line"></span><br><span class="line">lst[a]=id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="built_in">abs</span>(v[lst[a]]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(v[lst[a]]&lt;<span class="number">0</span>) lst[a]=poi[lst[a]]+maxnum; <span class="keyword">else</span> lst[a]=poi[lst[a]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1220-Stacks-题解&quot;&gt;&lt;a href=&quot;#Ural-1220-Stacks-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1220 Stacks 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1220&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1220 Stacks&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;模拟若干个栈。&lt;/p&gt;
&lt;p&gt;给定$n(1\le n\le 10^5)$个操作，每个操作有如下两个类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PUSH a b&lt;/code&gt;，意为把&lt;code&gt;b&lt;/code&gt;插入第&lt;code&gt;a&lt;/code&gt;个栈中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;POP a&lt;/code&gt;，意为输出第&lt;code&gt;a&lt;/code&gt;个栈的栈顶元素，并弹出栈顶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$1\le a \le 10^3,0\le b\le 10^9$，保证操作无误，内存限制为&lt;code&gt;0.75MB=768KB​&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="静态链表" scheme="http://yoursite.com/tags/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/"/>
    
      <category term="卡内存" scheme="http://yoursite.com/tags/%E5%8D%A1%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1218 Episode N-th: The Jedi Tournament 题解</title>
    <link href="http://yoursite.com/2019/09/04/Ural-1218-Episode-N-th-The-Jedi-Tournament-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/04/Ural-1218-Episode-N-th-The-Jedi-Tournament-题解/</id>
    <published>2019-09-04T14:22:21.000Z</published>
    <updated>2019-09-22T03:05:09.854Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1218-Episode-N-th-The-Jedi-Tournament-题解"><a href="#Ural-1218-Episode-N-th-The-Jedi-Tournament-题解" class="headerlink" title="Ural 1218 Episode N-th: The Jedi Tournament 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1218" target="_blank" rel="noopener">Ural 1218 Episode N-th: The Jedi Tournament</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n(1\le n\le 20)$个玩家，每个玩家有一个字符串名字和三个整数值(所有玩家的数值都不同)。对于玩家$i$和$j$，如果玩家$i$的三个值中至少有两个值大于玩家$j$的对应值，则$i$玩家可以淘汰$j$玩家。一个玩家胜利了就是他淘汰了所有人。你可以随意安排赛程，输出那些至少胜利了一次的玩家的名字(按照输入的顺序输出)。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>构图。若$i$玩家可以淘汰$j$玩家，则从$i$连一条有向边到$j$。问题转化成：如果从$i$开始，能找到一条长度为$n-1$的路径，那么他胜利了。</p><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法$1$"></a>方法$1$</h4><p>无脑暴力DFS。边数$n^2$，点数$n$，时间复杂度为$O(n^3)$。妥妥的<code>TLE</code>。</p><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法$2$"></a>方法$2$</h4><p>强连通分量缩点。因为在同一个强连通分量中，任意一个点都可以淘汰(这个强连通分量中)其它的点。缩点后，图变成一个<code>DAG</code>，而入度为$0$的那个强连通分量中，任意一个点都可以淘汰(整个图中)其它的点。输出那个强连通分量里所有的点即可。</p><h3 id="方法-2-程序"><a href="#方法-2-程序" class="headerlink" title="方法$2$程序"></a>方法$2$程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">210</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],b[maxn],c[maxn],tim,dfn[maxn],low[maxn],sta[maxn],ind,cscc,scc[maxn],deg[maxn];</span><br><span class="line"><span class="built_in">string</span> jedi[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[x]=low[x]=++tim;</span><br><span class="line">vis[x]=<span class="number">1</span>;</span><br><span class="line">sta[++ind]=x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;e[x].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> y=e[x][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!dfn[y])</span><br><span class="line">&#123;</span><br><span class="line">Tarjan(y);</span><br><span class="line">low[x]=min(low[x],low[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[y]) low[x]=min(low[x],dfn[y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(low[x]==dfn[x])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// printf("%d ",sta[ind]);</span></span><br><span class="line">scc[sta[ind]]=cscc;</span><br><span class="line">vis[sta[ind--]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(x!=sta[ind+<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">cscc++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// printf("\n");</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;jedi[i]&gt;&gt;a[i]&gt;&gt;b[i]&gt;&gt;c[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) rep(j,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;a[j]) cnt++;</span><br><span class="line"><span class="keyword">if</span>(b[i]&gt;b[j]) cnt++;</span><br><span class="line"><span class="keyword">if</span>(c[i]&gt;c[j]) cnt++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt&gt;=<span class="number">2</span>) e[i].push_back(j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) <span class="keyword">if</span>(!dfn[i]) Tarjan(i);</span><br><span class="line"></span><br><span class="line">rep(i,n) repV(j,e[i]) <span class="keyword">if</span>(scc[i]!=scc[j]) deg[scc[j]]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> deg0;</span><br><span class="line">rep(i,cscc) <span class="keyword">if</span>(deg[i]==<span class="number">0</span>) deg0=i;</span><br><span class="line"></span><br><span class="line">rep(i,n) <span class="keyword">if</span>(scc[i]==deg0) <span class="built_in">cout</span>&lt;&lt;jedi[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1218-Episode-N-th-The-Jedi-Tournament-题解&quot;&gt;&lt;a href=&quot;#Ural-1218-Episode-N-th-The-Jedi-Tournament-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1218 Episode N-th: The Jedi Tournament 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1218&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1218 Episode N-th: The Jedi Tournament&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n(1\le n\le 20)$个玩家，每个玩家有一个字符串名字和三个整数值(所有玩家的数值都不同)。对于玩家$i$和$j$，如果玩家$i$的三个值中至少有两个值大于玩家$j$的对应值，则$i$玩家可以淘汰$j$玩家。一个玩家胜利了就是他淘汰了所有人。你可以随意安排赛程，输出那些至少胜利了一次的玩家的名字(按照输入的顺序输出)。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
      <category term="强连通分量" scheme="http://yoursite.com/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="缩点" scheme="http://yoursite.com/tags/%E7%BC%A9%E7%82%B9/"/>
    
      <category term="Tarjan" scheme="http://yoursite.com/tags/Tarjan/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1217 Unlucky Tickets 题解</title>
    <link href="http://yoursite.com/2019/09/03/Ural-1217-Unlucky-Tickets-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/09/03/Ural-1217-Unlucky-Tickets-题解/</id>
    <published>2019-09-03T13:51:06.000Z</published>
    <updated>2019-09-22T03:06:18.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1217-Unlucky-Tickets-题解"><a href="#Ural-1217-Unlucky-Tickets-题解" class="headerlink" title="Ural 1217 Unlucky Tickets 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1217" target="_blank" rel="noopener">Ural 1217 Unlucky Tickets</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n(2\le n\le 20)$($n$是偶数)，求出在所有$n$位数中(可以有前导零)，前一半数码的和 与 后一半数码的和相等<strong>或</strong>在奇数位上的数码的和 与 在偶数位上的数码和相等 的个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑DP。</p><p>$f(i,j,k)$表示在前$i$位，前一半数码的和 减去 后一半数码的和的为$j$，在奇数位上的数码的和 减去 在偶数位上的数码和为$k$ 的个数。</p><p>Tip: $j$不可能为负数，而$k$有可能为负数，所以写的时候要把$k$变成非负数，即$f(i,j,k+base)$。</p><ul><li><strong>初始值</strong>：$f(0,0,0)=1$。</li><li><p><strong>状态转移方程</strong>：</p><p>设当前状态为$f(i,j,k)$，需转移到的状态为$f(i’,j’,k’)$，$i’$位上放的数是$x$。</p><p>$i’=i+1$。</p><p>若$i’&gt;n/2$且$x&gt;j$($j’$位负数)，跳出关于$x$的循环。</p><p>若$i’\le n/2$，$j’=j+x$；否则$j’=j-x$。</p><p>若$i’\%2=1$，$k’=k+x$；否则$k’=k-x$。</p><p>$f(i’,j’,k’)+=f(i,j,k)$即可。</p></li><li><p><strong>答案</strong>：$f(n,0,0)$。</p></li></ul><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">25</span>,base=<span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL dp[maxn][base+<span class="number">10</span>][base*<span class="number">2</span>+<span class="number">10</span>];</span><br><span class="line"><span class="comment">// dp[numbers of digits][the first half - the last half][digits on the odd positions - the digits on the even positions]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][base]=<span class="number">1</span>;</span><br><span class="line">rep(i,n) rep(j,base+<span class="number">1</span>) repa1(k,<span class="number">-200</span>,<span class="number">200</span>) <span class="keyword">if</span>(dp[i][j][k+base])</span><br><span class="line">&#123;</span><br><span class="line">rep(x,<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ci=i+<span class="number">1</span>,cj=j,ck=k;</span><br><span class="line"><span class="keyword">if</span>(ci&gt;n/<span class="number">2</span>&amp;&amp;x&gt;j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ci&lt;=n/<span class="number">2</span>) cj+=x; <span class="keyword">else</span> cj-=x;</span><br><span class="line"><span class="keyword">if</span>(ci%<span class="number">2</span>) ck+=x; <span class="keyword">else</span> ck-=x;</span><br><span class="line"></span><br><span class="line">dp[ci][cj][ck+base]+=dp[i][j][k+base];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%lld"</span>,dp[n][<span class="number">0</span>][base]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1217-Unlucky-Tickets-题解&quot;&gt;&lt;a href=&quot;#Ural-1217-Unlucky-Tickets-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1217 Unlucky Tickets 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1217&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1217 Unlucky Tickets&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n(2\le n\le 20)$($n$是偶数)，求出在所有$n$位数中(可以有前导零)，前一半数码的和 与 后一半数码的和相等&lt;strong&gt;或&lt;/strong&gt;在奇数位上的数码的和 与 在偶数位上的数码和相等 的个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>头文件和宏定义</title>
    <link href="http://yoursite.com/2019/09/02/%E5%A4%B4%E6%96%87%E4%BB%B6%E5%92%8C%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/2019/09/02/头文件和宏定义/</id>
    <published>2019-09-02T13:47:29.000Z</published>
    <updated>2019-10-05T06:25:27.788Z</updated>
    
    <content type="html"><![CDATA[<p><strong>头文件和宏定义有点长，会使文章看上去很长，请谅解。</strong></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j0 J0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> j1 J1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> jn Jn</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y0 Y0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> y1 Y1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> yn Yn</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************BEGIN************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************END**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;头文件和宏定义有点长，会使文章看上去很长，请谅解。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>agc029C Lexicographic constraints 题解</title>
    <link href="http://yoursite.com/2019/08/31/agc029C-Lexicographic-constraints-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/31/agc029C-Lexicographic-constraints-题解/</id>
    <published>2019-08-31T14:18:58.000Z</published>
    <updated>2019-09-02T13:42:21.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="agc029C-Lexicographic-constraints-题解"><a href="#agc029C-Lexicographic-constraints-题解" class="headerlink" title="agc029C Lexicographic constraints 题解"></a><a href="https://agc029.contest.atcoder.jp/tasks/agc029_c" target="_blank" rel="noopener">agc029C Lexicographic constraints</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p> 有$n$个字符串，分别为$S_1,S_2,\dots,S_n$，$S_i$的长度为$A_i(1\le i\le n)$。给定$n$和$A$，求用最少个数的字符组成$S_1,S_2,\dots,S_n$，使得$S_1&lt;S_2&lt;\dots&lt;S_n$(字典序)。输出这个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>贪心。对于每一个字符串，必须选择可选字符串中字典序最小的一个。</p><p><u>反证法：如果不选字典序最小的一个，答案肯定不会更优。</u></p><p>设每个字符为$0\sim\inf$中的一个数字。</p><p>所以</p><script type="math/tex; mode=display">S_1=\begin{matrix} \underbrace{0\dots0} \\ A_1\end{matrix}</script><p>已知$S_{i-1}$如何求$S_i(2\le i\le n)$呢。</p><ul><li>$A_i&gt;A_{i-1}$时，<script type="math/tex; mode=display">S_i=S_{i-1}+\begin{matrix} \underbrace{0\dots0} \\ A_i-A_{i-1}\end{matrix}</script></li><li>$A_i\le A_{i-1}$时，$S_i=S_{i-1}$的前$A_i$位，且$S_i$的最后一位加$1$，然后“进位”(如果当前位的值超出字符集的大小，就把当前位设置位$0$，前一位加$1$)。</li></ul><p>这里需要知道字符集大小。考虑二分，因为字符集大小是满足单调性的。<code>check</code>函数：“进位”时如果进到$-1$位了，就不可行。</p><p><u>证明：如果字符集大小位$m$，则字符集大小为$m+1$一定可行，而字符集大小为$m-1$不一定可行。</u></p><p><strong>问题：字符串长度最大为$10^9$，不能维护整个字符串。</strong></p><p>解法$1$：用一个<code>map&lt;int,int&gt;</code>表示第几位放的是什么字符。观察发现：字符串中大部分的字符为$0$，所以只维护字符不为$0$位就可以了。</p><p>Tip: 需要特判$A_1&lt;A_2&lt;\dots&lt;A_n$的情况，否则前$3$个点会<code>TLE</code>。</p><p>解法$2$：同样，字符串中大部分的字符为$0$，可以用一个<code>vector&lt;pair&lt;int,int&gt; &gt;</code>维护，<code>&lt;a,b&gt;</code>表示字符为<code>a</code>，出现了<code>b</code>次的字符串，存在<code>vector</code>里即可表达整个字符串。这个方法写起来会更麻烦一点。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法$1$"></a>解法$1$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">str.clear();</span><br><span class="line"></span><br><span class="line">rep(i,n)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;len)</span><br><span class="line">&#123;</span><br><span class="line">len=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!str.empty()&amp;&amp;str.rbegin()-&gt;fs&gt;=a[i]) str.erase(str.rbegin()-&gt;fs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cur=a[i]<span class="number">-1</span>;</span><br><span class="line">str[cur]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(str[cur]&gt;=x)</span><br><span class="line">&#123;</span><br><span class="line">str.erase(cur);</span><br><span class="line">str[--cur]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,n) SF(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f=<span class="number">1</span>;</span><br><span class="line">rep1(i,n<span class="number">-1</span>) <span class="keyword">if</span>(a[i]&lt;=a[i<span class="number">-1</span>]) f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(f) <span class="keyword">return</span> !PF(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">2</span>,r=n+<span class="number">1</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法$2$"></a>解法$2$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],alp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getlen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">repV(i,v) len+=i.sc;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getlast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v.back().fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushstr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!v.empty()&amp;&amp;x==getlast()) v.back().sc+=cnt; <span class="keyword">else</span> v.push_back(&#123;x,cnt&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">transform</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=getlen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur&lt;len)</span><br><span class="line">&#123;</span><br><span class="line">pushstr(<span class="number">0</span>,len-cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!v.empty()&amp;&amp;cur-v.back().sc&gt;=len)</span><br><span class="line">&#123;</span><br><span class="line">cur-=v.back().sc;</span><br><span class="line">v.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">v.back().sc-=cur-len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!v.empty()&amp;&amp;getlast()==alp<span class="number">-1</span>) v.pop_back();</span><br><span class="line"><span class="keyword">if</span>(v.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x=getlast()+<span class="number">1</span>;v.back().sc--;</span><br><span class="line"><span class="keyword">if</span>(!v.back().sc) v.pop_back();</span><br><span class="line"></span><br><span class="line">pushstr(x,<span class="number">1</span>);</span><br><span class="line">pushstr(<span class="number">0</span>,len-getlen());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.clear();</span><br><span class="line">rep(i,n) <span class="keyword">if</span>(!transform(a[i])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,n) SF(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n+<span class="number">1</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">alp=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check()) r=alp; <span class="keyword">else</span> l=alp+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;agc029C-Lexicographic-constraints-题解&quot;&gt;&lt;a href=&quot;#agc029C-Lexicographic-constraints-题解&quot; class=&quot;headerlink&quot; title=&quot;agc029C Lexicographic constraints 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://agc029.contest.atcoder.jp/tasks/agc029_c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;agc029C Lexicographic constraints&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt; 有$n$个字符串，分别为$S_1,S_2,\dots,S_n$，$S_i$的长度为$A_i(1\le i\le n)$。给定$n$和$A$，求用最少个数的字符组成$S_1,S_2,\dots,S_n$，使得$S_1&amp;lt;S_2&amp;lt;\dots&amp;lt;S_n$(字典序)。输出这个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AtCoder" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/AtCoder/"/>
    
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1204 Idempotents 题解</title>
    <link href="http://yoursite.com/2019/08/29/Ural-1204-Idempotents-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/29/Ural-1204-Idempotents-题解/</id>
    <published>2019-08-29T06:13:26.000Z</published>
    <updated>2019-08-31T15:02:56.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1204-Idempotents-题解"><a href="#Ural-1204-Idempotents-题解" class="headerlink" title="Ural 1204 Idempotents 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1204" target="_blank" rel="noopener">Ural 1204 Idempotents</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$，且$n=p\times q$，$p,q$为不相等的质数。求所有的$x$，满足$0\le x\le n$且$x^2=x\pmod{n}$，并按序输出。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><script type="math/tex; mode=display">\begin{align*}&\because x^2=x\pmod{n}\\&\therefore x(x-1)=0\pmod{n}\\&\therefore x(x-1)=0\pmod{pq}\\&\therefore x(x-1)=kpq,k\ge 0\\&\because x\le pq\\&\therefore\begin{cases}x\%p=0,x\%q=1\\x\%p=1,x\%q=0\\\end{cases}\\&\therefore\begin{cases}x=ap,x=bq+1\\x=cp+1,x=dq\end{cases}\\&\therefore\begin{cases}ap-bq=1\\dq-cp=1\end{cases}\end{align*}</script><p>因为$gcd(p,q)=1$，所以可以用扩展欧几里得算法求出$x$。如果$x$是负数需要加上$n$。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tim,n,p,q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pri;</span><br><span class="line"><span class="keyword">bool</span> isp[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">&#123;</span><br><span class="line">exgcd(b,a%b,y,x);</span><br><span class="line">y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100000</span>;i++) <span class="keyword">if</span>(!isp[i])</span><br><span class="line">&#123;</span><br><span class="line">pri.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>;j&lt;=<span class="number">100000</span>;j+=i) isp[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;tim);</span><br><span class="line"><span class="keyword">while</span>(tim--)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">repV(i,pri) <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=i;</span><br><span class="line">q=n/i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x,y,ans1,ans2;</span><br><span class="line"></span><br><span class="line">exgcd(p,q,x,y);</span><br><span class="line">ans1=x&gt;<span class="number">0</span>?x*p:x*p+n;</span><br><span class="line"></span><br><span class="line">exgcd(q,p,x,y);</span><br><span class="line">ans2=x&gt;<span class="number">0</span>?x*q:x*q+n;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"0 1 %d %d\n"</span>,min(ans1,ans2),max(ans1,ans2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1204-Idempotents-题解&quot;&gt;&lt;a href=&quot;#Ural-1204-Idempotents-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1204 Idempotents 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1204&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1204 Idempotents&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n$，且$n=p\times q$，$p,q$为不相等的质数。求所有的$x$，满足$0\le x\le n$且$x^2=x\pmod{n}$，并按序输出。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="拓展欧几里得" scheme="http://yoursite.com/tags/%E6%8B%93%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    
      <category term="同余" scheme="http://yoursite.com/tags/%E5%90%8C%E4%BD%99/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1298 Knight 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1298-Knight-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1298-Knight-题解/</id>
    <published>2019-08-18T07:40:00.000Z</published>
    <updated>2019-09-07T03:15:19.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1298-Knight-题解"><a href="#Ural-1298-Knight-题解" class="headerlink" title="Ural 1298 Knight 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1298" target="_blank" rel="noopener">Ural 1298 Knight</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n\times n(1\le n\le8)$的国际象棋棋盘和一个骑士(基本上相当于中国象棋的马)，问可否用经过每个格子$1$次。如果可以，输出路径，否则输出<code>IMPOSSIBLE</code>。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑回溯。暴力程序十分好写，但是会超时。</p><p>可以用启发式优化。</p><p>设当前点为$(x,y)$，可到达的点为$(x’,y’)$。优先选择$(x’,y’)$状态种数少的回溯，即可以转移的格子的数量少。</p><p>这样优化后就可以过了。</p><p>Tip: 优化后很快，为<code>0.015s</code>。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,cnt[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pre[maxn][maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ok</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i,n) rep(j,n) <span class="keyword">if</span>(!vis[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[x][y].fs!=<span class="number">-1</span>) print(pre[x][y].fs,pre[x][y].sc);</span><br><span class="line">PF(<span class="string">"%c%c\n"</span>,<span class="keyword">char</span>(x+<span class="string">'a'</span>),<span class="keyword">char</span>(y+<span class="string">'1'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cnt[x.fs][x.sc]&lt;cnt[y.fs][y.sc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ok())</span><br><span class="line">&#123;</span><br><span class="line">print(x,y);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; w;w.clear();</span><br><span class="line">rep(i,<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cx=x+dx[i],cy=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(cx&gt;=<span class="number">0</span>&amp;&amp;cx&lt;n&amp;&amp;cy&gt;=<span class="number">0</span>&amp;&amp;cy&lt;n&amp;&amp;!vis[cx][cy]) w.push_back(&#123;cx,cy&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(All(w),cmp);</span><br><span class="line"></span><br><span class="line">repV(i,w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cx=i.fs,cy=i.sc;</span><br><span class="line">pre[cx][cy]=&#123;x,y&#125;;</span><br><span class="line">dfs(cx,cy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vis[x][y]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">rep(i,n) rep(j,n)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(&#123;i,j&#125;);</span><br><span class="line"></span><br><span class="line">rep(k,<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ci=i+dx[k],cj=j+dy[k];</span><br><span class="line"><span class="keyword">if</span>(ci&gt;=<span class="number">0</span>&amp;&amp;ci&lt;n&amp;&amp;cj&gt;=<span class="number">0</span>&amp;&amp;cj&lt;n) cnt[i][j]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(All(v),cmp);</span><br><span class="line"></span><br><span class="line">repV(it,v) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i=it.fs,j=it.sc;</span><br><span class="line"></span><br><span class="line">MC(vis);</span><br><span class="line">MC(pre);</span><br><span class="line">pre[i][j]=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">dfs(i,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1298-Knight-题解&quot;&gt;&lt;a href=&quot;#Ural-1298-Knight-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1298 Knight 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1298&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1298 Knight&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个$n\times n(1\le n\le8)$的国际象棋棋盘和一个骑士(基本上相当于中国象棋的马)，问可否用经过每个格子$1$次。如果可以，输出路径，否则输出&lt;code&gt;IMPOSSIBLE&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="回溯" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="启发式" scheme="http://yoursite.com/tags/%E5%90%AF%E5%8F%91%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1248 Sequence Sum 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1248-Sequence-Sum-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1248-Sequence-Sum-题解/</id>
    <published>2019-08-18T07:39:53.000Z</published>
    <updated>2019-08-31T15:01:50.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1248-Sequence-Sum-题解"><a href="#Ural-1248-Sequence-Sum-题解" class="headerlink" title="Ural 1248 Sequence Sum 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1248" target="_blank" rel="noopener">Ural 1248 Sequence Sum</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个用科学计数法表示的实数$(10^{-100}\sim10^{100})$，输出它们的和。</p><a id="more"></a><p>Tip: 一个实数可以用科学计数法表示为$x\times10^y$，其中$1\le x&lt;10$ $x$为实数，$y$是整数。输入时表示为$xey$。保证输入的实数有$19$位有效数字。输出时用科学计数法，必须包括$19$位正确数字。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li>读入字符串，把它们换成正常形态放入数组。</li><li>小数点对齐。</li><li>计算。</li><li>换成科学计数法输出。</li></ol><p>Tip: 口胡得很简单，写起来可能有点麻烦，要仔细。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dot=<span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,dig[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Atoi</span><span class="params">(<span class="built_in">string</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">repV(i,x) <span class="keyword">if</span>(<span class="built_in">isdigit</span>(i)) res=(res+i-<span class="string">'0'</span>)*<span class="number">10</span>;res/=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> (x[<span class="number">0</span>]==<span class="string">'-'</span>?-res:res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> k,<span class="built_in">string</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> e=x.find(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a=x.substr(<span class="number">0</span>,e),b=x.substr(e+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(a.find(<span class="string">"."</span>)==<span class="built_in">string</span>::npos) a+=<span class="string">'.'</span>;</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">101</span>) a=<span class="string">'0'</span>+a;</span><br><span class="line">rep(i,<span class="number">101</span>) a+=<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dot=a.find(<span class="string">"."</span>)+Atoi(b)-(b[<span class="number">0</span>]==<span class="string">'-'</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hav=<span class="number">0</span>;</span><br><span class="line">repd(i,dot+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line">hav=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dig[k][Dot-(dot-i+<span class="number">1</span>)+hav]=a[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hav=<span class="number">0</span>;</span><br><span class="line">repa(i,dot+<span class="number">1</span>,a.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line">hav=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dig[k][Dot+(i-dot)-hav]=a[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">func(i,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) rep(j,<span class="number">1000</span>) dig[n][j]+=dig[i][j];</span><br><span class="line"></span><br><span class="line">repd(j,<span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(dig[n][j]&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> hav=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-1</span>==Dot) hav=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">dig[n][j<span class="number">-1</span>-hav]+=dig[n][j]/<span class="number">10</span>;</span><br><span class="line">dig[n][j]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w=INF,e=<span class="number">0</span>;</span><br><span class="line">rep(i,Dot) <span class="keyword">if</span>(dig[n][i])</span><br><span class="line">&#123;</span><br><span class="line">w=i;</span><br><span class="line">e=Dot-w<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(w==INF)</span><br><span class="line">&#123;</span><br><span class="line">repa(i,Dot+<span class="number">1</span>,<span class="number">1000</span>) <span class="keyword">if</span>(dig[n][i])</span><br><span class="line">&#123;</span><br><span class="line">w=i;</span><br><span class="line">e=i-Dot;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">e=-e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dig[n][w]&lt;&lt;<span class="string">'.'</span>;</span><br><span class="line">repa(i,w+<span class="number">1</span>,w+<span class="number">20</span>) <span class="keyword">if</span>(i!=Dot) <span class="built_in">cout</span>&lt;&lt;dig[n][i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'e'</span>&lt;&lt;e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1248-Sequence-Sum-题解&quot;&gt;&lt;a href=&quot;#Ural-1248-Sequence-Sum-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1248 Sequence Sum 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1248&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1248 Sequence Sum&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n$个用科学计数法表示的实数$(10^{-100}\sim10^{100})$，输出它们的和。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1238 Folding 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1238-Folding-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1238-Folding-题解/</id>
    <published>2019-08-18T07:39:47.000Z</published>
    <updated>2019-09-20T10:42:25.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1238-Folding-题解"><a href="#Ural-1238-Folding-题解" class="headerlink" title="Ural 1238 Folding 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1238" target="_blank" rel="noopener">Ural 1238 Folding</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义折叠、展开为：</p><ul><li>单个大写英文字母是一个折叠的串，把它展开后是它本身。</li><li>如果$S$和$Q$是折叠的串，则$SQ$也是折叠的串。如果$S$展开后为$S’$，$Q$展开后为$Q’$，则$SQ$展开后为$S’Q’$。</li><li>如果$S$是个折叠的串，则$X(S)$也是折叠的串，其中$X$是一个十进制大于$1$的整数，如果$S$展开为$S’$，则$X(S)$展开后为$S’$重复$X$次。</li></ul><p>给定一个字符串(长度小于等于$100$)，求把它折叠后有最小长度的那个字符串。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑记忆化搜索(DP也可以)。</p><p>定义$f(s)$为$s$字符串折叠后有最小长度的那个字符串。</p><p>边界为当$|s|\le4$($|s|$为$s$的长度)时，$f(s)=s$。</p><p>给定$s$，求出$f(s)$有以下几种方式</p><ul><li><p>$f(s)=s$。</p></li><li><p>设$1&lt;x\le|s|,|s|\%x=0$且有字符串$q$，$q$重复$x$次为$s$，$f(s)=x“(”+f(q)+“)”$。</p></li><li><p>设$0&lt;i&lt;|s|$，$f(s)=f(s[0..i-1])+f(s[i..|s|-1])$。</p></li></ul><p>取长度最小的值即可，不要忘了记忆化。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">Itoa</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> res=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">res+=<span class="keyword">char</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">x/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">reverse(All(res));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">sol</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis.count(s)) <span class="keyword">return</span> vis[s];</span><br><span class="line"><span class="keyword">if</span>(s.size()&lt;=<span class="number">4</span>) <span class="keyword">return</span> vis[s]=s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ans=s;</span><br><span class="line">rep1(i,s.size()) <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;s.size()%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len=s.size()/i;</span><br><span class="line"><span class="built_in">string</span> x=s.substr(<span class="number">0</span>,len);</span><br><span class="line"><span class="keyword">bool</span> f=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s.size();j+=len) <span class="keyword">if</span>(s.substr(j,len)!=x) f=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> res=Itoa(i)+<span class="string">'('</span>+sol(x)+<span class="string">')'</span>;</span><br><span class="line"><span class="keyword">if</span>(ans.size()&gt;res.size()) ans=res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep1(i,s.size()<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> res=sol(s.substr(<span class="number">0</span>,i))+sol(s.substr(i));</span><br><span class="line"><span class="keyword">if</span>(ans.size()&gt;res.size()) ans=res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vis[s]=ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sol(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1238-Folding-题解&quot;&gt;&lt;a href=&quot;#Ural-1238-Folding-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1238 Folding 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1238&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1238 Folding&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;定义折叠、展开为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个大写英文字母是一个折叠的串，把它展开后是它本身。&lt;/li&gt;
&lt;li&gt;如果$S$和$Q$是折叠的串，则$SQ$也是折叠的串。如果$S$展开后为$S’$，$Q$展开后为$Q’$，则$SQ$展开后为$S’Q’$。&lt;/li&gt;
&lt;li&gt;如果$S$是个折叠的串，则$X(S)$也是折叠的串，其中$X$是一个十进制大于$1$的整数，如果$S$展开为$S’$，则$X(S)$展开后为$S’$重复$X$次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给定一个字符串(长度小于等于$100$)，求把它折叠后有最小长度的那个字符串。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="记忆化搜索" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1201 Which Day Is It 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1201-Which-Day-Is-It-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1201-Which-Day-Is-It-题解/</id>
    <published>2019-08-18T07:39:40.000Z</published>
    <updated>2019-08-31T15:01:11.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1201-Which-Day-Is-It-题解"><a href="#Ural-1201-Which-Day-Is-It-题解" class="headerlink" title="Ural 1201 Which Day Is It? 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1201" target="_blank" rel="noopener">Ural 1201 Which Day Is It?</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>打印一个月历。</p><a id="more"></a><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入日$(1\sim31)$、月$(1\sim12)$、年$(1600\sim2400)$。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 16 3 2002</span><br><span class="line">输出:</span><br><span class="line">mon........4...11...18...25</span><br><span class="line">tue........5...12...19...26</span><br><span class="line">wed........6...13...20...27</span><br><span class="line">thu........7...14...21...28</span><br><span class="line">fri...1....8...15...22...29</span><br><span class="line">sat...2....9..[16]..23...30</span><br><span class="line">sun...3...10...17...24...31</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 1 3 2002</span><br><span class="line">输出:</span><br><span class="line">mon........4...11...18...25</span><br><span class="line">tue........5...12...19...26</span><br><span class="line">wed........6...13...20...27</span><br><span class="line">thu........7...14...21...28</span><br><span class="line">fri.[.1]...8...15...22...29</span><br><span class="line">sat...2....9...16...23...30</span><br><span class="line">sun...3...10...17...24...31</span><br></pre></td></tr></table></figure><p>打印$7$行，<code>mon</code> <code>tue</code>…这些都懂吧。在输入的那天打上[]。</p><p>Tips:</p><ol><li><p>样例输出中的<code>.</code>其实是<code> </code>(空格)。</p></li><li><p>输出的第一列日期前有三个<code>.</code>，第二列即以后一位数前有$4$个，两位数前有$3$个。<br> 例:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 30 1 2012</span><br><span class="line">输出:</span><br><span class="line">mon........2....9...16...23..[30]</span><br><span class="line">tue........3...10...17...24...31</span><br><span class="line">wed........4...11...18...25.....</span><br><span class="line">thu........5...12...19...26.....</span><br><span class="line">fri........6...13...20...27.....</span><br><span class="line">sat........7...14...21...28.....</span><br><span class="line">sun...1....8...15...22...29.....</span><br></pre></td></tr></table></figure></li><li><p>如果输入的那一天是个一位数，则打印$[.x]$。</p></li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li>找出这一个月的第一天是星期几。<ol><li>知道1.1.1(公元元年1月1日)是星期一。</li><li>暴力推一下就可以了。</li></ol></li><li>打印月历。</li></ol><p>Tip: 口胡得很简单，写起来可能有点麻烦，要仔细。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=INF;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> days[]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">0</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> weeks[]=&#123;<span class="string">""</span>,<span class="string">"mon"</span>,<span class="string">"tue"</span>,<span class="string">"wed"</span>,<span class="string">"thu"</span>,<span class="string">"fri"</span>,<span class="string">"sat"</span>,<span class="string">"sun"</span>&#125;;</span><br><span class="line"><span class="comment">// 1.1.1 =&gt; mon</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getday</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(month==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">29</span>;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">100</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">28</span>;</span><br><span class="line"><span class="keyword">return</span> year%<span class="number">4</span>==<span class="number">0</span>?<span class="number">29</span>:<span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> days[month];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> y1,<span class="keyword">int</span> m1,<span class="keyword">int</span> y2,<span class="keyword">int</span> m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y1==y2) <span class="keyword">return</span> m1&lt;m2; <span class="keyword">else</span> <span class="keyword">return</span> y1&lt;y2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getweek</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">1</span>,m=<span class="number">1</span>,w=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(y!=year||m!=month)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(y,m,year,month))</span><br><span class="line">&#123;</span><br><span class="line">w=(w+getday(y,m)%<span class="number">7</span>)%<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line">y++;</span><br><span class="line">m=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> w+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> lst=getweek(year,month);</span><br><span class="line">w[lst].push_back(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">rep1(i,lst<span class="number">-1</span>) w[i].push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">15</span>];</span><br><span class="line">pos[<span class="number">0</span>]=<span class="number">6</span>;</span><br><span class="line">rep1(i,<span class="number">5</span>) pos[i]=pos[i<span class="number">-1</span>]+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">repa1(i,<span class="number">2</span>,getday(year,month))</span><br><span class="line">&#123;</span><br><span class="line">lst++;</span><br><span class="line"><span class="keyword">if</span>(lst==<span class="number">8</span>) lst=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">w[lst].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str[<span class="number">8</span>];</span><br><span class="line">rep1(i,<span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">str[i]=weeks[i];</span><br><span class="line">rep(j,<span class="number">100</span>) str[i]+=<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">rep(j,w[i].size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=w[i][j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x) str[i][pos[j]]=(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span>(x/<span class="number">10</span>) str[i][pos[j]<span class="number">-1</span>]=(x/<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x==day)</span><br><span class="line">&#123;</span><br><span class="line">str[i][pos[j]<span class="number">-2</span>]=<span class="string">'['</span>;</span><br><span class="line">str[i][pos[j]+<span class="number">1</span>]=<span class="string">']'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep1(i,<span class="number">7</span>) <span class="built_in">cout</span>&lt;&lt;str[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year,month,day;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;day&gt;&gt;month&gt;&gt;year;</span><br><span class="line">print(year,month,day);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1201-Which-Day-Is-It-题解&quot;&gt;&lt;a href=&quot;#Ural-1201-Which-Day-Is-It-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1201 Which Day Is It? 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1201&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1201 Which Day Is It?&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;打印一个月历。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 718A Efim and Strange Grade 程序分析</title>
    <link href="http://yoursite.com/2019/08/18/Codeforces-718A-Efim-and-Strange-Grade-%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/08/18/Codeforces-718A-Efim-and-Strange-Grade-程序分析/</id>
    <published>2019-08-18T07:39:30.000Z</published>
    <updated>2019-08-31T14:56:43.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-718A-Efim-and-Strange-Grade-程序分析"><a href="#Codeforces-718A-Efim-and-Strange-Grade-程序分析" class="headerlink" title="Codeforces 718A Efim and Strange Grade 程序分析"></a><a href="http://codeforces.com/contest/718/problem/A" target="_blank" rel="noopener">Codeforces 718A Efim and Strange Grade</a> 程序分析</h2><a id="more"></a><h3 id="jerry的程序"><a href="#jerry的程序" class="headerlink" title="jerry的程序"></a><strong><em><a href="http://codeforces.com/profile/jerry" target="_blank" rel="noopener">jerry</a></em></strong>的程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> buf;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> at)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">at--;</span><br><span class="line"><span class="keyword">if</span> (at &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf = <span class="string">'1'</span> + buf;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (buf[at] == <span class="string">'.'</span>) at--;</span><br><span class="line">buf[at]++;</span><br><span class="line"><span class="keyword">if</span> (buf[at] == <span class="string">'9'</span>+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[at] = <span class="string">'0'</span>;</span><br><span class="line">up(at);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; buf;</span><br><span class="line"><span class="keyword">while</span> (buf[i] != <span class="string">'.'</span>) i++; i++;</span><br><span class="line"><span class="keyword">while</span> (i &lt; buf.length() &amp;&amp; buf[i] &lt;= <span class="string">'4'</span>) i++;</span><br><span class="line"><span class="keyword">if</span> (i == buf.length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (;buf[i] != <span class="string">'.'</span> &amp;&amp; k;i--) <span class="keyword">if</span> (buf[i] &gt;= <span class="string">'5'</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf.resize(i); up(i);</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (buf.back() == <span class="string">'.'</span>) buf.pop_back();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，先找到小数点第一个后大于等于$5$的数位，如果没有的话直接输出原数。</p><p>从那个数位起，从后往前循环到小数点处，如果还当前数位大于等于$5$且有进位的机会，则先把这个数的结尾改成这个位置，因为之后的所有数都会被清零，然后调用up函数进位，如果有$9$的数继续递归，否则退出，如果整数部分首位还要进位，需要在最前面加上$1$。</p><p>最后注意最后一个字符如果是小数点要删去。</p><p>总结：用一个函数来执行进位，如果还有进位机会只需继续调用函数就行了，这样处理起来十分方便。</p><h3 id="izrak的程序"><a href="#izrak的程序" class="headerlink" title="izrak的程序"></a><strong><em><a href="http://codeforces.com/profile/izrak" target="_blank" rel="noopener">izrak</a></em></strong>的程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FO(i,a,b) for (int i = (a); i &lt; (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(v) int(v.size())</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200005</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;t);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>);</span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= l; j++) <span class="keyword">if</span> (s[j] &gt;= <span class="string">'5'</span>) &#123;</span><br><span class="line">                s[j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">bool</span> roundup = <span class="literal">true</span>;</span><br><span class="line">                t--;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j<span class="number">-1</span>; k &gt; i; k--) &#123;</span><br><span class="line">                    <span class="comment">// s[k]++</span></span><br><span class="line">                    <span class="keyword">if</span> (roundup) &#123;</span><br><span class="line">                        s[k]++;</span><br><span class="line">                        <span class="keyword">if</span> (s[k] &gt;= <span class="string">'5'</span> &amp;&amp; t) &#123;</span><br><span class="line">                            s[k] = <span class="number">0</span>;</span><br><span class="line">                            t--;</span><br><span class="line">                            roundup = <span class="literal">true</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> roundup = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (roundup) &#123;</span><br><span class="line">                    s[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i<span class="number">-1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                        s[k]++;</span><br><span class="line">                        <span class="keyword">if</span> (s[k] &lt;= <span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">else</span> s[k] = <span class="string">'0'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] != <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序读入时在数字前加上一个前导零，以便处理整数部分首位进位情况。</p><p>第一层循环找到小数点的位置，第二层循环找到小数点后第一位大于等于$5$的数字，第三层循环(最多进位到小数点)，roundup记录是否继续进位，如果进位后还有大于等于$5$的数字且还有进位机会，则继续进位。如果第三层循环结束后，仍需继续进位，则在整数部分进位。进位时每进位一次，就把这一位设置为<code>\0</code>，这样输出时只会输出到第一个<code>\0</code>的位置便结束。</p><p>注意最后需判断如果开始时加上的前导零仍是零，就不能输出。</p><p>总结：用bool变量roundup维护需不需要继续进位，进了位的位置就标为<code>\0</code>，如果在小数点前面进位直接循环处理即可，这样处理起来不容易错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-718A-Efim-and-Strange-Grade-程序分析&quot;&gt;&lt;a href=&quot;#Codeforces-718A-Efim-and-Strange-Grade-程序分析&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 718A Efim and Strange Grade 程序分析&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/718/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 718A Efim and Strange Grade&lt;/a&gt; 程序分析&lt;/h2&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
  </entry>
  
  <entry>
    <title>2019 Multi-University Training Contest 2 1010 Just Skip The Problem 自闭记</title>
    <link href="http://yoursite.com/2019/08/18/2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-%E8%87%AA%E9%97%AD%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/18/2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记/</id>
    <published>2019-08-18T07:39:09.000Z</published>
    <updated>2019-08-31T14:56:16.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记"><a href="#2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记" class="headerlink" title="2019 Multi-University Training Contest 2: 1010 Just Skip The Problem 自闭记"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6600" target="_blank" rel="noopener">2019 Multi-University Training Contest 2: 1010 Just Skip The Problem</a> 自闭记</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>多测。每次给你一个数$n$，你可以同时问无数次，每次问的是一个数$y_i$，你会得到的回答是$x\&amp;y_i$是否为$y_i$，问你问的最少的次数的种数$\%1e6+3$，可以调换顺序。</p><a id="more"></a><h3 id="10min-得出数学方法"><a href="#10min-得出数学方法" class="headerlink" title="10min 得出数学方法"></a>10min 得出数学方法</h3><p>求$n!\%1e6+3$。</p><h3 id="50min-自闭"><a href="#50min-自闭" class="headerlink" title="50min 自闭"></a>50min 自闭</h3><ul><li>5min 写出裸暴力，优化10min，交一发TLE</li><li>30min 网上找各种快速阶乘题解、优化，发现板子全是错的：$3!$打出$60$、不会清空$\dots\dots$，写到自闭</li><li>5min 发现一旦$n\ge1e6+3$时取了模后就为$0$了$\dots\dots$，自闭</li></ul><h3 id="2min-AC"><a href="#2min-AC" class="headerlink" title="2min AC"></a>2min AC</h3><p>直接码，2min AC$\dots\dots$</p><h3 id="总结：以后多多总结性质。"><a href="#总结：以后多多总结性质。" class="headerlink" title="总结：以后多多总结性质。"></a>总结：以后多多总结性质。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记&quot;&gt;&lt;a href=&quot;#2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记&quot; class=&quot;headerlink&quot; title=&quot;2019 Multi-University Training Contest 2: 1010 Just Skip The Problem 自闭记&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019 Multi-University Training Contest 2: 1010 Just Skip The Problem&lt;/a&gt; 自闭记&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;多测。每次给你一个数$n$，你可以同时问无数次，每次问的是一个数$y_i$，你会得到的回答是$x\&amp;amp;y_i$是否为$y_i$，问你问的最少的次数的种数$\%1e6+3$，可以调换顺序。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="hdu" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/hdu/"/>
    
      <category term="多校" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/hdu/%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
