<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sir-kay</title>
  
  <subtitle>Think Once, Debug More. Think More, Debug Once.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-02T13:56:12.025Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sir-kay</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>博客意见</title>
    <link href="http://yoursite.com/2019/09/02/%E5%8D%9A%E5%AE%A2%E6%84%8F%E8%A7%81/"/>
    <id>http://yoursite.com/2019/09/02/博客意见/</id>
    <published>2019-09-02T13:53:30.000Z</published>
    <updated>2019-09-02T13:56:12.025Z</updated>
    
    <content type="html"><![CDATA[<p><strong>关于本博客的任何意见可以在此贴评论，谢谢阅读。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;关于本博客的任何意见可以在此贴评论，谢谢阅读。&lt;/strong&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>头文件和宏定义</title>
    <link href="http://yoursite.com/2019/09/02/%E5%A4%B4%E6%96%87%E4%BB%B6%E5%92%8C%E5%AE%8F%E5%AE%9A%E4%B9%89/"/>
    <id>http://yoursite.com/2019/09/02/头文件和宏定义/</id>
    <published>2019-09-02T13:47:29.000Z</published>
    <updated>2019-09-02T13:51:06.556Z</updated>
    
    <content type="html"><![CDATA[<p><strong>头文件和宏定义有点长，会使文章看上去很长，请谅解。</strong></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=INF;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;头文件和宏定义有点长，会使文章看上去很长，请谅解。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>agc029C Lexicographic constraints 题解</title>
    <link href="http://yoursite.com/2019/08/31/agc029C-Lexicographic-constraints-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/31/agc029C-Lexicographic-constraints-题解/</id>
    <published>2019-08-31T14:18:58.000Z</published>
    <updated>2019-09-02T13:42:21.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="agc029C-Lexicographic-constraints-题解"><a href="#agc029C-Lexicographic-constraints-题解" class="headerlink" title="agc029C Lexicographic constraints 题解"></a><a href="https://agc029.contest.atcoder.jp/tasks/agc029_c" target="_blank" rel="noopener">agc029C Lexicographic constraints</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p> 有$n$个字符串，分别为$S_1,S_2,\dots,S_n$，$S_i$的长度为$A_i(1\le i\le n)$。给定$n$和$A$，求用最少个数的字符组成$S_1,S_2,\dots,S_n$，使得$S_1&lt;S_2&lt;\dots&lt;S_n$(字典序)。输出这个数。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>贪心。对于每一个字符串，必须选择可选字符串中字典序最小的一个。</p><p><u>反证法：如果不选字典序最小的一个，答案肯定不会更优。</u></p><p>设每个字符为$0\sim\inf$中的一个数字。</p><p>所以</p><script type="math/tex; mode=display">S_1=\begin{matrix} \underbrace{0\dots0} \\ A_1\end{matrix}</script><p>已知$S_{i-1}$如何求$S_i(2\le i\le n)$呢。</p><ul><li>$A_i&gt;A_{i-1}$时，<script type="math/tex; mode=display">S_i=S_{i-1}+\begin{matrix} \underbrace{0\dots0} \\ A_i-A_{i-1}\end{matrix}</script></li><li>$A_i\le A_{i-1}$时，$S_i=S_{i-1}$的前$A_i$位，且$S_i$的最后一位加$1$，然后“进位”(如果当前位的值超出字符集的大小，就把当前位设置位$0$，前一位加$1$)。</li></ul><p>这里需要知道字符集大小。考虑二分，因为字符集大小是满足单调性的。<code>check</code>函数：“进位”时如果进到$-1$位了，就不可行。</p><p><u>证明：如果字符集大小位$m$，则字符集大小为$m+1$一定可行，而字符集大小为$m-1$不一定可行。</u></p><p><strong>问题：字符串长度最大为$10^9$，不能维护整个字符串。</strong></p><p>解法$1$：用一个<code>map&lt;int,int&gt;</code>表示第几位放的是什么字符。观察发现：字符串中大部分的字符为$0$，所以只维护字符不为$0$位就可以了。</p><p>Tip: 需要特判$A_1&lt;A_2&lt;\dots&lt;A_n$的情况，否则前$3$个点会<code>TLE</code>。</p><p>解法$2$：同样，字符串中大部分的字符为$0$，可以用一个<code>vector&lt;pair&lt;int,int&gt; &gt;</code>维护，<code>&lt;a,b&gt;</code>表示字符为<code>a</code>，出现了<code>b</code>次的字符串，存在<code>vector</code>里即可表达整个字符串。这个方法写起来会更麻烦一点。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法$1$"></a>解法$1$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">str.clear();</span><br><span class="line"></span><br><span class="line">rep(i,n)</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;len)</span><br><span class="line">&#123;</span><br><span class="line">len=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!str.empty()&amp;&amp;str.rbegin()-&gt;fs&gt;=a[i]) str.erase(str.rbegin()-&gt;fs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cur=a[i]<span class="number">-1</span>;</span><br><span class="line">str[cur]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(str[cur]&gt;=x)</span><br><span class="line">&#123;</span><br><span class="line">str.erase(cur);</span><br><span class="line">str[--cur]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len=a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,n) SF(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> f=<span class="number">1</span>;</span><br><span class="line">rep1(i,n<span class="number">-1</span>) <span class="keyword">if</span>(a[i]&lt;=a[i<span class="number">-1</span>]) f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(f) <span class="keyword">return</span> !PF(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">2</span>,r=n+<span class="number">1</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) r=mid; <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法$2$"></a>解法$2$</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,a[maxn],alp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getlen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">repV(i,v) len+=i.sc;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getlast</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> v.back().fs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushstr</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!v.empty()&amp;&amp;x==getlast()) v.back().sc+=cnt; <span class="keyword">else</span> v.push_back(&#123;x,cnt&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">transform</span><span class="params">(<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> cur=getlen();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cur&lt;len)</span><br><span class="line">&#123;</span><br><span class="line">pushstr(<span class="number">0</span>,len-cur);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(!v.empty()&amp;&amp;cur-v.back().sc&gt;=len)</span><br><span class="line">&#123;</span><br><span class="line">cur-=v.back().sc;</span><br><span class="line">v.pop_back();</span><br><span class="line">&#125;</span><br><span class="line">v.back().sc-=cur-len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!v.empty()&amp;&amp;getlast()==alp<span class="number">-1</span>) v.pop_back();</span><br><span class="line"><span class="keyword">if</span>(v.empty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x=getlast()+<span class="number">1</span>;v.back().sc--;</span><br><span class="line"><span class="keyword">if</span>(!v.back().sc) v.pop_back();</span><br><span class="line"></span><br><span class="line">pushstr(x,<span class="number">1</span>);</span><br><span class="line">pushstr(<span class="number">0</span>,len-getlen());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">v.clear();</span><br><span class="line">rep(i,n) <span class="keyword">if</span>(!transform(a[i])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">rep(i,n) SF(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n+<span class="number">1</span>; <span class="comment">// [l,r)</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">alp=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check()) r=alp; <span class="keyword">else</span> l=alp+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"%d"</span>,r);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;agc029C-Lexicographic-constraints-题解&quot;&gt;&lt;a href=&quot;#agc029C-Lexicographic-constraints-题解&quot; class=&quot;headerlink&quot; title=&quot;agc029C Lexicographic constraints 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://agc029.contest.atcoder.jp/tasks/agc029_c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;agc029C Lexicographic constraints&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt; 有$n$个字符串，分别为$S_1,S_2,\dots,S_n$，$S_i$的长度为$A_i(1\le i\le n)$。给定$n$和$A$，求用最少个数的字符组成$S_1,S_2,\dots,S_n$，使得$S_1&amp;lt;S_2&amp;lt;\dots&amp;lt;S_n$(字典序)。输出这个数。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AtCoder" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/AtCoder/"/>
    
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1204 Idempotents 题解</title>
    <link href="http://yoursite.com/2019/08/29/Ural-1204-Idempotents-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/29/Ural-1204-Idempotents-题解/</id>
    <published>2019-08-29T06:13:26.000Z</published>
    <updated>2019-08-31T15:02:56.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1204-Idempotents-题解"><a href="#Ural-1204-Idempotents-题解" class="headerlink" title="Ural 1204 Idempotents 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1204" target="_blank" rel="noopener">Ural 1204 Idempotents</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$，且$n=p\times q$，$p,q$为不相等的质数。求所有的$x$，满足$0\le x\le n$且$x^2=x\pmod{n}$，并按序输出。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><script type="math/tex; mode=display">\begin{align*}&\because x^2=x\pmod{n}\\&\therefore x(x-1)=0\pmod{n}\\&\therefore x(x-1)=0\pmod{pq}\\&\therefore x(x-1)=kpq,k\ge 0\\&\because x\le pq\\&\therefore\begin{cases}x\%p=0,x\%q=1\\x\%p=1,x\%q=0\\\end{cases}\\&\therefore\begin{cases}x=ap,x=bq+1\\x=cp+1,x=dq\end{cases}\\&\therefore\begin{cases}ap-bq=1\\dq-cp=1\end{cases}\end{align*}</script><p>因为$gcd(p,q)=1$，所以可以用扩展欧几里得算法求出$x$。如果$x$是负数需要加上$n$。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tim,n,p,q;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pri;</span><br><span class="line"><span class="keyword">bool</span> isp[<span class="number">100010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b)</span><br><span class="line">&#123;</span><br><span class="line">exgcd(b,a%b,y,x);</span><br><span class="line">y-=a/b*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line">y=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">100000</span>;i++) <span class="keyword">if</span>(!isp[i])</span><br><span class="line">&#123;</span><br><span class="line">pri.push_back(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i*<span class="number">2</span>;j&lt;=<span class="number">100000</span>;j+=i) isp[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;tim);</span><br><span class="line"><span class="keyword">while</span>(tim--)</span><br><span class="line">&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">repV(i,pri) <span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">p=i;</span><br><span class="line">q=n/i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x,y,ans1,ans2;</span><br><span class="line"></span><br><span class="line">exgcd(p,q,x,y);</span><br><span class="line">ans1=x&gt;<span class="number">0</span>?x*p:x*p+n;</span><br><span class="line"></span><br><span class="line">exgcd(q,p,x,y);</span><br><span class="line">ans2=x&gt;<span class="number">0</span>?x*q:x*q+n;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"0 1 %d %d\n"</span>,min(ans1,ans2),max(ans1,ans2));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1204-Idempotents-题解&quot;&gt;&lt;a href=&quot;#Ural-1204-Idempotents-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1204 Idempotents 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1204&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1204 Idempotents&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n$，且$n=p\times q$，$p,q$为不相等的质数。求所有的$x$，满足$0\le x\le n$且$x^2=x\pmod{n}$，并按序输出。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="拓展欧几里得" scheme="http://yoursite.com/tags/%E6%8B%93%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    
      <category term="同余" scheme="http://yoursite.com/tags/%E5%90%8C%E4%BD%99/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1298 Knight 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1298-Knight-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1298-Knight-题解/</id>
    <published>2019-08-18T07:40:00.000Z</published>
    <updated>2019-08-31T15:02:19.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1298-Knight-题解"><a href="#Ural-1298-Knight-题解" class="headerlink" title="Ural 1298 Knight 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1298" target="_blank" rel="noopener">Ural 1298 Knight</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n\times n(1\le n\le8)$的国际象棋棋盘和一个骑士(基本上相当于中国象棋的马)，问可否用经过每个格子$1$次。如果可以，输出路径，否则输出<code>IMPOSSIBLE</code>。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑回溯。暴力程序十分好写，但是会超时。</p><p>可以用启发式优化。</p><p>设当前点为$(x,y)$，可到达的点为$(x’,y’)$。优先选择$(x’,y’)$状态种数少的回溯，即可以转移的格子的数量少。</p><p>这样优化后就可以过了。</p><p>Tip: 优化后很快，为$0.015s$。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,cnt[maxn][maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pre[maxn][maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">ok</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">rep(i,n) rep(j,n) <span class="keyword">if</span>(!vis[i][j]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pre[x][y].fs!=<span class="number">-1</span>) print(pre[x][y].fs,pre[x][y].sc);</span><br><span class="line">PF(<span class="string">"%c%c\n"</span>,<span class="keyword">char</span>(x+<span class="string">'a'</span>),<span class="keyword">char</span>(y+<span class="string">'1'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x,pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> cnt[x.fs][x.sc]&lt;cnt[y.fs][y.sc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x][y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ok())</span><br><span class="line">&#123;</span><br><span class="line">print(x,y);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; w;w.clear();</span><br><span class="line">rep(i,<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cx=x+dx[i],cy=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(cx&gt;=<span class="number">0</span>&amp;&amp;cx&lt;n&amp;&amp;cy&gt;=<span class="number">0</span>&amp;&amp;cy&lt;n&amp;&amp;!vis[cx][cy]) w.push_back(&#123;cx,cy&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(All(w),cmp);</span><br><span class="line"></span><br><span class="line">repV(i,w)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cx=i.fs,cy=i.sc;</span><br><span class="line">pre[cx][cy]=&#123;x,y&#125;;</span><br><span class="line">dfs(cx,cy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vis[x][y]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SF(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line">rep(i,n) rep(j,n)</span><br><span class="line">&#123;</span><br><span class="line">v.push_back(&#123;i,j&#125;);</span><br><span class="line"></span><br><span class="line">rep(k,<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ci=i+dx[k],cj=j+dy[k];</span><br><span class="line"><span class="keyword">if</span>(ci&gt;=<span class="number">0</span>&amp;&amp;ci&lt;n&amp;&amp;cj&gt;=<span class="number">0</span>&amp;&amp;cj&lt;n) cnt[i][j]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(All(v),cmp);</span><br><span class="line"></span><br><span class="line">repV(it,v) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i=it.fs,j=it.sc;</span><br><span class="line"></span><br><span class="line">MC(vis);</span><br><span class="line">MC(pre);</span><br><span class="line">pre[i][j]=&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line">dfs(i,j);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PF(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1298-Knight-题解&quot;&gt;&lt;a href=&quot;#Ural-1298-Knight-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1298 Knight 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1298&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1298 Knight&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个$n\times n(1\le n\le8)$的国际象棋棋盘和一个骑士(基本上相当于中国象棋的马)，问可否用经过每个格子$1$次。如果可以，输出路径，否则输出&lt;code&gt;IMPOSSIBLE&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="回溯" scheme="http://yoursite.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
      <category term="启发式" scheme="http://yoursite.com/tags/%E5%90%AF%E5%8F%91%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1248 Sequence Sum 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1248-Sequence-Sum-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1248-Sequence-Sum-题解/</id>
    <published>2019-08-18T07:39:53.000Z</published>
    <updated>2019-08-31T15:01:50.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1248-Sequence-Sum-题解"><a href="#Ural-1248-Sequence-Sum-题解" class="headerlink" title="Ural 1248 Sequence Sum 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1248" target="_blank" rel="noopener">Ural 1248 Sequence Sum</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个用科学计数法表示的实数$(10^{-100}\sim10^{100})$，输出它们的和。</p><a id="more"></a><p>Tip: 一个实数可以用科学计数法表示为$x\times10^y$，其中$1\le x&lt;10$ $x$为实数，$y$是整数。输入时表示为$xey$。保证输入的实数有$19$位有效数字。输出时用科学计数法，必须包括$19$位正确数字。</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li>读入字符串，把它们换成正常形态放入数组。</li><li>小数点对齐。</li><li>计算。</li><li>换成科学计数法输出。</li></ol><p>Tip: 口胡得很简单，写起来可能有点麻烦，要仔细。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1010</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dot=<span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,dig[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Atoi</span><span class="params">(<span class="built_in">string</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">repV(i,x) <span class="keyword">if</span>(<span class="built_in">isdigit</span>(i)) res=(res+i-<span class="string">'0'</span>)*<span class="number">10</span>;res/=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">return</span> (x[<span class="number">0</span>]==<span class="string">'-'</span>?-res:res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> k,<span class="built_in">string</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> e=x.find(<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> a=x.substr(<span class="number">0</span>,e),b=x.substr(e+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(a.find(<span class="string">"."</span>)==<span class="built_in">string</span>::npos) a+=<span class="string">'.'</span>;</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">101</span>) a=<span class="string">'0'</span>+a;</span><br><span class="line">rep(i,<span class="number">101</span>) a+=<span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dot=a.find(<span class="string">"."</span>)+Atoi(b)-(b[<span class="number">0</span>]==<span class="string">'-'</span>?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hav=<span class="number">0</span>;</span><br><span class="line">repd(i,dot+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line">hav=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dig[k][Dot-(dot-i+<span class="number">1</span>)+hav]=a[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hav=<span class="number">0</span>;</span><br><span class="line">repa(i,dot+<span class="number">1</span>,a.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'.'</span>)</span><br><span class="line">&#123;</span><br><span class="line">hav=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dig[k][Dot+(i-dot)-hav]=a[i]-<span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">rep(i,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> x;<span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">func(i,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i,n) rep(j,<span class="number">1000</span>) dig[n][j]+=dig[i][j];</span><br><span class="line"></span><br><span class="line">repd(j,<span class="number">1000</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(dig[n][j]&gt;=<span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> hav=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(j<span class="number">-1</span>==Dot) hav=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">dig[n][j<span class="number">-1</span>-hav]+=dig[n][j]/<span class="number">10</span>;</span><br><span class="line">dig[n][j]%=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w=INF,e=<span class="number">0</span>;</span><br><span class="line">rep(i,Dot) <span class="keyword">if</span>(dig[n][i])</span><br><span class="line">&#123;</span><br><span class="line">w=i;</span><br><span class="line">e=Dot-w<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(w==INF)</span><br><span class="line">&#123;</span><br><span class="line">repa(i,Dot+<span class="number">1</span>,<span class="number">1000</span>) <span class="keyword">if</span>(dig[n][i])</span><br><span class="line">&#123;</span><br><span class="line">w=i;</span><br><span class="line">e=i-Dot;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">e=-e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dig[n][w]&lt;&lt;<span class="string">'.'</span>;</span><br><span class="line">repa(i,w+<span class="number">1</span>,w+<span class="number">20</span>) <span class="keyword">if</span>(i!=Dot) <span class="built_in">cout</span>&lt;&lt;dig[n][i];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">'e'</span>&lt;&lt;e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1248-Sequence-Sum-题解&quot;&gt;&lt;a href=&quot;#Ural-1248-Sequence-Sum-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1248 Sequence Sum 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1248&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1248 Sequence Sum&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定$n$个用科学计数法表示的实数$(10^{-100}\sim10^{100})$，输出它们的和。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1238 Folding 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1238-Folding-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1238-Folding-题解/</id>
    <published>2019-08-18T07:39:47.000Z</published>
    <updated>2019-08-31T15:01:32.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1238-Folding-题解"><a href="#Ural-1238-Folding-题解" class="headerlink" title="Ural 1238 Folding 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1238" target="_blank" rel="noopener">Ural 1238 Folding</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>定义折叠、展开为：</p><ul><li>单个大写英文字母是一个折叠的串，把它展开后是它本身。</li><li>如果$S$和$Q$是折叠的串，则$SQ$也是折叠的串。如果$S$展开后为$S’$，$Q$展开后为$Q’$，则$SQ$展开后为$S’Q’$。</li><li>如果$S$是个折叠的串，则$X(S)$也是折叠的串，其中$X$是一个十进制大于$1$的整数，如果$S$展开为$S’$，则$X(S)$展开后为$S’$重复$X$次。</li></ul><p>给定一个字符串(长度小于等于$100$)，求把它折叠后有最小长度的那个字符串。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑记忆化搜索(DP也可以)。</p><p>定义$f(s)$为$s$字符串折叠后有最小长度的那个字符串。</p><p>边界为当$|s|\le4$($|s|$为$s$的长度)时，$f(s)=s$。</p><p>给定$s$，求出$f(s)$有以下几种方式</p><ul><li><p>$f(s)=s$。</p></li><li><p>设$1&lt;x\le|s|,|s|\%x=0$且有字符串$q$，$q$重复$x$次为$s$，$f(s)=x”(“+f(q)+”)”$。</p></li><li><p>设$0&lt;i&lt;|s|$，$f(s)=f(s[0..i-1])+f(s[i..|s|-1])$。</p></li></ul><p>取长度最小的值即可，不要忘了记忆化。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">Itoa</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> res=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">while</span>(x)</span><br><span class="line">&#123;</span><br><span class="line">res+=<span class="keyword">char</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">x/=<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">reverse(All(res));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">string</span>&gt; vis;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="built_in">string</span> <span class="title">sol</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis.count(s)) <span class="keyword">return</span> vis[s];</span><br><span class="line"><span class="keyword">if</span>(s.size()&lt;=<span class="number">4</span>) <span class="keyword">return</span> vis[s]=s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> ans=s;</span><br><span class="line">rep1(i,s.size()) <span class="keyword">if</span>(i&gt;<span class="number">1</span>&amp;&amp;s.size()%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len=s.size()/i;</span><br><span class="line"><span class="built_in">string</span> x=s.substr(<span class="number">0</span>,len);</span><br><span class="line"><span class="keyword">bool</span> f=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s.size();j+=len) <span class="keyword">if</span>(s.substr(j,len)!=x) f=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(f)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> res=Itoa(i)+<span class="string">'('</span>+sol(x)+<span class="string">')'</span>;</span><br><span class="line"><span class="keyword">if</span>(ans.size()&gt;res.size()) ans=res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep1(i,s.size()<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">string</span> res=sol(s.substr(<span class="number">0</span>,i))+sol(s.substr(i));</span><br><span class="line"><span class="keyword">if</span>(ans.size()&gt;res.size()) ans=res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vis[s]=ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;sol(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1238-Folding-题解&quot;&gt;&lt;a href=&quot;#Ural-1238-Folding-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1238 Folding 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1238&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1238 Folding&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;定义折叠、展开为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个大写英文字母是一个折叠的串，把它展开后是它本身。&lt;/li&gt;
&lt;li&gt;如果$S$和$Q$是折叠的串，则$SQ$也是折叠的串。如果$S$展开后为$S’$，$Q$展开后为$Q’$，则$SQ$展开后为$S’Q’$。&lt;/li&gt;
&lt;li&gt;如果$S$是个折叠的串，则$X(S)$也是折叠的串，其中$X$是一个十进制大于$1$的整数，如果$S$展开为$S’$，则$X(S)$展开后为$S’$重复$X$次。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;给定一个字符串(长度小于等于$100$)，求把它折叠后有最小长度的那个字符串。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="记忆化搜索" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
      <category term="字符串" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1201 Which Day Is It 题解</title>
    <link href="http://yoursite.com/2019/08/18/Ural-1201-Which-Day-Is-It-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/18/Ural-1201-Which-Day-Is-It-题解/</id>
    <published>2019-08-18T07:39:40.000Z</published>
    <updated>2019-08-31T15:01:11.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1201-Which-Day-Is-It-题解"><a href="#Ural-1201-Which-Day-Is-It-题解" class="headerlink" title="Ural 1201 Which Day Is It? 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1201" target="_blank" rel="noopener">Ural 1201 Which Day Is It?</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>打印一个月历。</p><a id="more"></a><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>输入日$(1\sim31)$、月$(1\sim12)$、年$(1600\sim2400)$。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 16 3 2002</span><br><span class="line">输出:</span><br><span class="line">mon........4...11...18...25</span><br><span class="line">tue........5...12...19...26</span><br><span class="line">wed........6...13...20...27</span><br><span class="line">thu........7...14...21...28</span><br><span class="line">fri...1....8...15...22...29</span><br><span class="line">sat...2....9..[16]..23...30</span><br><span class="line">sun...3...10...17...24...31</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 1 3 2002</span><br><span class="line">输出:</span><br><span class="line">mon........4...11...18...25</span><br><span class="line">tue........5...12...19...26</span><br><span class="line">wed........6...13...20...27</span><br><span class="line">thu........7...14...21...28</span><br><span class="line">fri.[.1]...8...15...22...29</span><br><span class="line">sat...2....9...16...23...30</span><br><span class="line">sun...3...10...17...24...31</span><br></pre></td></tr></table></figure><p>打印$7$行，<code>mon</code> <code>tue</code>…这些都懂吧。在输入的那天打上[]。</p><p>Tips:</p><ol><li><p>样例输出中的<code>.</code>其实是<code> </code>(空格)。</p></li><li><p>输出的第一列日期前有三个<code>.</code>，第二列即以后一位数前有$4$个，两位数前有$3$个。<br> 例:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入: 30 1 2012</span><br><span class="line">输出:</span><br><span class="line">mon........2....9...16...23..[30]</span><br><span class="line">tue........3...10...17...24...31</span><br><span class="line">wed........4...11...18...25.....</span><br><span class="line">thu........5...12...19...26.....</span><br><span class="line">fri........6...13...20...27.....</span><br><span class="line">sat........7...14...21...28.....</span><br><span class="line">sun...1....8...15...22...29.....</span><br></pre></td></tr></table></figure></li><li><p>如果输入的那一天是个一位数，则打印$[.x]$。</p></li></ol><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><ol><li>找出这一个月的第一天是星期几。<ol><li>知道1.1.1(公元元年1月1日)是星期一。</li><li>暴力推一下就可以了。</li></ol></li><li>打印月历。</li></ol><p>Tip: 口胡得很简单，写起来可能有点麻烦，要仔细。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=INF;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> days[]=&#123;<span class="number">0</span>,<span class="number">31</span>,<span class="number">0</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> weeks[]=&#123;<span class="string">""</span>,<span class="string">"mon"</span>,<span class="string">"tue"</span>,<span class="string">"wed"</span>,<span class="string">"thu"</span>,<span class="string">"fri"</span>,<span class="string">"sat"</span>,<span class="string">"sun"</span>&#125;;</span><br><span class="line"><span class="comment">// 1.1.1 =&gt; mon</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getday</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(month==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">400</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">29</span>;</span><br><span class="line"><span class="keyword">if</span>(year%<span class="number">100</span>==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">28</span>;</span><br><span class="line"><span class="keyword">return</span> year%<span class="number">4</span>==<span class="number">0</span>?<span class="number">29</span>:<span class="number">28</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> days[month];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> y1,<span class="keyword">int</span> m1,<span class="keyword">int</span> y2,<span class="keyword">int</span> m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y1==y2) <span class="keyword">return</span> m1&lt;m2; <span class="keyword">else</span> <span class="keyword">return</span> y1&lt;y2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getweek</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> y=<span class="number">1</span>,m=<span class="number">1</span>,w=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(y!=year||m!=month)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cmp(y,m,year,month))</span><br><span class="line">&#123;</span><br><span class="line">w=(w+getday(y,m)%<span class="number">7</span>)%<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">m++;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">13</span>)</span><br><span class="line">&#123;</span><br><span class="line">y++;</span><br><span class="line">m=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> w+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; w[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> lst=getweek(year,month);</span><br><span class="line">w[lst].push_back(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">rep1(i,lst<span class="number">-1</span>) w[i].push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">15</span>];</span><br><span class="line">pos[<span class="number">0</span>]=<span class="number">6</span>;</span><br><span class="line">rep1(i,<span class="number">5</span>) pos[i]=pos[i<span class="number">-1</span>]+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">repa1(i,<span class="number">2</span>,getday(year,month))</span><br><span class="line">&#123;</span><br><span class="line">lst++;</span><br><span class="line"><span class="keyword">if</span>(lst==<span class="number">8</span>) lst=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">w[lst].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str[<span class="number">8</span>];</span><br><span class="line">rep1(i,<span class="number">7</span>)</span><br><span class="line">&#123;</span><br><span class="line">str[i]=weeks[i];</span><br><span class="line">rep(j,<span class="number">100</span>) str[i]+=<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">rep(j,w[i].size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=w[i][j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x) str[i][pos[j]]=(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line"><span class="keyword">if</span>(x/<span class="number">10</span>) str[i][pos[j]<span class="number">-1</span>]=(x/<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x==day)</span><br><span class="line">&#123;</span><br><span class="line">str[i][pos[j]<span class="number">-2</span>]=<span class="string">'['</span>;</span><br><span class="line">str[i][pos[j]+<span class="number">1</span>]=<span class="string">']'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep1(i,<span class="number">7</span>) <span class="built_in">cout</span>&lt;&lt;str[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> year,month,day;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;day&gt;&gt;month&gt;&gt;year;</span><br><span class="line">print(year,month,day);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1201-Which-Day-Is-It-题解&quot;&gt;&lt;a href=&quot;#Ural-1201-Which-Day-Is-It-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1201 Which Day Is It? 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1201&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1201 Which Day Is It?&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;打印一个月历。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 718A Efim and Strange Grade 程序分析</title>
    <link href="http://yoursite.com/2019/08/18/Codeforces-718A-Efim-and-Strange-Grade-%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/08/18/Codeforces-718A-Efim-and-Strange-Grade-程序分析/</id>
    <published>2019-08-18T07:39:30.000Z</published>
    <updated>2019-08-31T14:56:43.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Codeforces-718A-Efim-and-Strange-Grade-程序分析"><a href="#Codeforces-718A-Efim-and-Strange-Grade-程序分析" class="headerlink" title="Codeforces 718A Efim and Strange Grade 程序分析"></a><a href="http://codeforces.com/contest/718/problem/A" target="_blank" rel="noopener">Codeforces 718A Efim and Strange Grade</a> 程序分析</h2><a id="more"></a><h3 id="jerry的程序"><a href="#jerry的程序" class="headerlink" title="jerry的程序"></a><strong><em><a href="http://codeforces.com/profile/jerry" target="_blank" rel="noopener">jerry</a></em></strong>的程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">string</span> buf;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> at)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">at--;</span><br><span class="line"><span class="keyword">if</span> (at &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf = <span class="string">'1'</span> + buf;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (buf[at] == <span class="string">'.'</span>) at--;</span><br><span class="line">buf[at]++;</span><br><span class="line"><span class="keyword">if</span> (buf[at] == <span class="string">'9'</span>+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf[at] = <span class="string">'0'</span>;</span><br><span class="line">up(at);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>.sync_with_stdio(<span class="literal">false</span>); <span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k &gt;&gt; buf;</span><br><span class="line"><span class="keyword">while</span> (buf[i] != <span class="string">'.'</span>) i++; i++;</span><br><span class="line"><span class="keyword">while</span> (i &lt; buf.length() &amp;&amp; buf[i] &lt;= <span class="string">'4'</span>) i++;</span><br><span class="line"><span class="keyword">if</span> (i == buf.length())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (;buf[i] != <span class="string">'.'</span> &amp;&amp; k;i--) <span class="keyword">if</span> (buf[i] &gt;= <span class="string">'5'</span>)</span><br><span class="line">&#123;</span><br><span class="line">buf.resize(i); up(i);</span><br><span class="line">k--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (buf.back() == <span class="string">'.'</span>) buf.pop_back();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; buf &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，先找到小数点第一个后大于等于$5$的数位，如果没有的话直接输出原数。</p><p>从那个数位起，从后往前循环到小数点处，如果还当前数位大于等于$5$且有进位的机会，则先把这个数的结尾改成这个位置，因为之后的所有数都会被清零，然后调用up函数进位，如果有$9$的数继续递归，否则退出，如果整数部分首位还要进位，需要在最前面加上$1$。</p><p>最后注意最后一个字符如果是小数点要删去。</p><p>总结：用一个函数来执行进位，如果还有进位机会只需继续调用函数就行了，这样处理起来十分方便。</p><h3 id="izrak的程序"><a href="#izrak的程序" class="headerlink" title="izrak的程序"></a><strong><em><a href="http://codeforces.com/profile/izrak" target="_blank" rel="noopener">izrak</a></em></strong>的程序</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FO(i,a,b) for (int i = (a); i &lt; (b); i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sz(v) int(v.size())</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[<span class="number">200005</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;l, &amp;t);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s+<span class="number">1</span>);</span><br><span class="line">    s[<span class="number">0</span>] = <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt;= l; j++) <span class="keyword">if</span> (s[j] &gt;= <span class="string">'5'</span>) &#123;</span><br><span class="line">                s[j] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">bool</span> roundup = <span class="literal">true</span>;</span><br><span class="line">                t--;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = j<span class="number">-1</span>; k &gt; i; k--) &#123;</span><br><span class="line">                    <span class="comment">// s[k]++</span></span><br><span class="line">                    <span class="keyword">if</span> (roundup) &#123;</span><br><span class="line">                        s[k]++;</span><br><span class="line">                        <span class="keyword">if</span> (s[k] &gt;= <span class="string">'5'</span> &amp;&amp; t) &#123;</span><br><span class="line">                            s[k] = <span class="number">0</span>;</span><br><span class="line">                            t--;</span><br><span class="line">                            roundup = <span class="literal">true</span>;</span><br><span class="line">                        &#125; <span class="keyword">else</span> roundup = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (roundup) &#123;</span><br><span class="line">                    s[i] = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = i<span class="number">-1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                        s[k]++;</span><br><span class="line">                        <span class="keyword">if</span> (s[k] &lt;= <span class="string">'9'</span>) <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">else</span> s[k] = <span class="string">'0'</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] != <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, s+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个程序读入时在数字前加上一个前导零，以便处理整数部分首位进位情况。</p><p>第一层循环找到小数点的位置，第二层循环找到小数点后第一位大于等于$5$的数字，第三层循环(最多进位到小数点)，roundup记录是否继续进位，如果进位后还有大于等于$5$的数字且还有进位机会，则继续进位。如果第三层循环结束后，仍需继续进位，则在整数部分进位。进位时每进位一次，就把这一位设置为<code>\0</code>，这样输出时只会输出到第一个<code>\0</code>的位置便结束。</p><p>注意最后需判断如果开始时加上的前导零仍是零，就不能输出。</p><p>总结：用bool变量roundup维护需不需要继续进位，进了位的位置就标为<code>\0</code>，如果在小数点前面进位直接循环处理即可，这样处理起来不容易错。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Codeforces-718A-Efim-and-Strange-Grade-程序分析&quot;&gt;&lt;a href=&quot;#Codeforces-718A-Efim-and-Strange-Grade-程序分析&quot; class=&quot;headerlink&quot; title=&quot;Codeforces 718A Efim and Strange Grade 程序分析&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://codeforces.com/contest/718/problem/A&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Codeforces 718A Efim and Strange Grade&lt;/a&gt; 程序分析&lt;/h2&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Codeforces/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="模拟" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>2019 Multi-University Training Contest 2 1010 Just Skip The Problem 自闭记</title>
    <link href="http://yoursite.com/2019/08/18/2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-%E8%87%AA%E9%97%AD%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/08/18/2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记/</id>
    <published>2019-08-18T07:39:09.000Z</published>
    <updated>2019-08-31T14:56:16.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记"><a href="#2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记" class="headerlink" title="2019 Multi-University Training Contest 2: 1010 Just Skip The Problem 自闭记"></a><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6600" target="_blank" rel="noopener">2019 Multi-University Training Contest 2: 1010 Just Skip The Problem</a> 自闭记</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>多测。每次给你一个数$n$，你可以同时问无数次，每次问的是一个数$y_i$，你会得到的回答是$x\&amp;y_i$是否为$y_i$，问你问的最少的次数的种数$\%1e6+3$，可以调换顺序。</p><a id="more"></a><h3 id="10min-得出数学方法"><a href="#10min-得出数学方法" class="headerlink" title="10min 得出数学方法"></a>10min 得出数学方法</h3><p>求$n!\%1e6+3$。</p><h3 id="50min-自闭"><a href="#50min-自闭" class="headerlink" title="50min 自闭"></a>50min 自闭</h3><ul><li>5min 写出裸暴力，优化10min，交一发TLE</li><li>30min 网上找各种快速阶乘题解、优化，发现板子全是错的：$3!$打出$60$、不会清空$\dots\dots$，写到自闭</li><li>5min 发现一旦$n\ge1e6+3$时取了模后就为$0$了$\dots\dots$，自闭</li></ul><h3 id="2min-AC"><a href="#2min-AC" class="headerlink" title="2min AC"></a>2min AC</h3><p>直接码，2min AC$\dots\dots$</p><h3 id="总结：以后多多总结性质。"><a href="#总结：以后多多总结性质。" class="headerlink" title="总结：以后多多总结性质。"></a>总结：以后多多总结性质。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记&quot;&gt;&lt;a href=&quot;#2019-Multi-University-Training-Contest-2-1010-Just-Skip-The-Problem-自闭记&quot; class=&quot;headerlink&quot; title=&quot;2019 Multi-University Training Contest 2: 1010 Just Skip The Problem 自闭记&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.hdu.edu.cn/showproblem.php?pid=6600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2019 Multi-University Training Contest 2: 1010 Just Skip The Problem&lt;/a&gt; 自闭记&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;多测。每次给你一个数$n$，你可以同时问无数次，每次问的是一个数$y_i$，你会得到的回答是$x\&amp;amp;y_i$是否为$y_i$，问你问的最少的次数的种数$\%1e6+3$，可以调换顺序。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="hdu" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/hdu/"/>
    
      <category term="多校" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/hdu/%E5%A4%9A%E6%A0%A1/"/>
    
    
      <category term="数学" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1029 Ministry 题解</title>
    <link href="http://yoursite.com/2019/08/12/Ural-1029-Ministry-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/12/Ural-1029-Ministry-题解/</id>
    <published>2019-08-12T10:57:45.000Z</published>
    <updated>2019-08-31T14:59:45.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1029-Ministry-题解"><a href="#Ural-1029-Ministry-题解" class="headerlink" title="Ural 1029 Ministry 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1029" target="_blank" rel="noopener">Ural 1029 Ministry</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n\times m(1\le n \le10,1\le m \le500)$的矩阵，矩阵中的每个值都是一个小于等于$10^9$的正整数。</p><p>现在从第$1$行的任意位置开始，在第$n$行的任意位置结束。每次有$3$种移动选择(不能移动到矩阵外)。</p><p>设当前位置为$(i,j)$</p><ul><li><p>移动到$(i+1,j)$</p></li><li><p>移动到$(i,j-1)$</p></li><li><p>移动到$(i,j+1)$</p></li></ul><p>每条路径的价值是路径走过所有的位置上的值的和(小于等于$10^9$)。</p><p>问在所有路径中，路径价值最小的，输出这条路径所有位置的列号。</p><a id="more"></a><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑记忆化搜索(DP也可以)。</p><p>对于每个点，记忆化搜索可以移动到它的$3$种位置，取最小值即可，顺便记录一下路径。</p><p>也可以无脑最短路。</p><p>Tips:</p><ol><li><p>WA$1$的同学不要着急，Test$1$并不是样例，仔细找找有没有错误。</p></li><li><p>设$(i,j)$的答案为$dp(i,j)$，矩阵中的值为$a(i,j)$，状态转移方程如果是$dp(i,j)=\min\{dp(i-1,j),dp(i,j-1),dp(i,j+1) \}+a(i,j)$可能会WA$1$，改为$dp(i,j)=\min\{dp(i-1,j)+a(i,j),dp(i,j-1)+a(i,j),dp(i,j+1)+a(i,j) \}$即可AC。目前并不知道原因(我太弱了)，如果有知道的可以在评论区留言，谢谢！</p></li></ol><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="AC程序"><a href="#AC程序" class="headerlink" title="AC程序"></a>AC程序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>,maxm=<span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn][maxm],dp[maxn][maxm];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pre[maxn][maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sol</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">1</span>||y&gt;m) <span class="keyword">return</span> dp[x][y]=INF;</span><br><span class="line"><span class="keyword">if</span>(dp[x][y]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[x][y]; <span class="keyword">else</span> dp[x][y]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res=sol(x<span class="number">-1</span>,y)+a[x][y];</span><br><span class="line">dp[x][y]=res;</span><br><span class="line">pre[x][y]=&#123;x<span class="number">-1</span>,y&#125;;</span><br><span class="line"></span><br><span class="line">res=sol(x,y<span class="number">-1</span>)+a[x][y];</span><br><span class="line"><span class="keyword">if</span>(res&lt;dp[x][y])</span><br><span class="line">&#123;</span><br><span class="line">dp[x][y]=res;</span><br><span class="line">pre[x][y]=&#123;x,y<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res=sol(x,y+<span class="number">1</span>)+a[x][y];</span><br><span class="line"><span class="keyword">if</span>(res&lt;dp[x][y])</span><br><span class="line">&#123;</span><br><span class="line">dp[x][y]=res;</span><br><span class="line">pre[x][y]=&#123;x,y+<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">1</span>) print(pre[x][y].fs,pre[x][y].sc);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;y&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">rep1(i,n) rep1(j,m) <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line"></span><br><span class="line">MS(dp,<span class="number">-1</span>);</span><br><span class="line">rep1(j,m) dp[<span class="number">1</span>][j]=a[<span class="number">1</span>][j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">rep1(j,m) <span class="keyword">if</span>(sol(n,j)&lt;sol(n,ans)) ans=j;</span><br><span class="line"></span><br><span class="line">print(n,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure><h4 id="WA-1-程序"><a href="#WA-1-程序" class="headerlink" title="WA$1$程序"></a>WA$1$程序</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">110</span>,maxm=<span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[maxn][maxm],dp[maxn][maxm];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pre[maxn][maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sol</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y&lt;<span class="number">1</span>||y&gt;m) <span class="keyword">return</span> dp[x][y]=INF;</span><br><span class="line"><span class="keyword">if</span>(dp[x][y]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[x][y]; <span class="keyword">else</span> dp[x][y]=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res=sol(x<span class="number">-1</span>,y);</span><br><span class="line">dp[x][y]=res;</span><br><span class="line">pre[x][y]=&#123;x<span class="number">-1</span>,y&#125;;</span><br><span class="line"></span><br><span class="line">res=sol(x,y<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(res&lt;dp[x][y])</span><br><span class="line">&#123;</span><br><span class="line">dp[x][y]=res;</span><br><span class="line">pre[x][y]=&#123;x,y<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res=sol(x,y+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(res&lt;dp[x][y])</span><br><span class="line">&#123;</span><br><span class="line">dp[x][y]=res;</span><br><span class="line">pre[x][y]=&#123;x,y+<span class="number">1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dp[x][y]+=a[x][y];</span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">1</span>) print(pre[x][y].fs,pre[x][y].sc);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;y&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">rep1(i,n) rep1(j,m) <span class="built_in">cin</span>&gt;&gt;a[i][j];</span><br><span class="line"></span><br><span class="line">MS(dp,<span class="number">-1</span>);</span><br><span class="line">rep1(j,m) dp[<span class="number">1</span>][j]=a[<span class="number">1</span>][j];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">rep1(j,m) <span class="keyword">if</span>(sol(n,j)&lt;sol(n,ans)) ans=j;</span><br><span class="line"></span><br><span class="line">print(n,ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1029-Ministry-题解&quot;&gt;&lt;a href=&quot;#Ural-1029-Ministry-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1029 Ministry 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1029&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1029 Ministry&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个$n\times m(1\le n \le10,1\le m \le500)$的矩阵，矩阵中的每个值都是一个小于等于$10^9$的正整数。&lt;/p&gt;
&lt;p&gt;现在从第$1$行的任意位置开始，在第$n$行的任意位置结束。每次有$3$种移动选择(不能移动到矩阵外)。&lt;/p&gt;
&lt;p&gt;设当前位置为$(i,j)$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;移动到$(i+1,j)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移动到$(i,j-1)$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移动到$(i,j+1)$&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每条路径的价值是路径走过所有的位置上的值的和(小于等于$10^9$)。&lt;/p&gt;
&lt;p&gt;问在所有路径中，路径价值最小的，输出这条路径所有位置的列号。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="DP" scheme="http://yoursite.com/tags/DP/"/>
    
      <category term="记忆化搜索" scheme="http://yoursite.com/tags/%E8%AE%B0%E5%BF%86%E5%8C%96%E6%90%9C%E7%B4%A2/"/>
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Ural 1250 Sea Burial 题解</title>
    <link href="http://yoursite.com/2019/08/12/Ural-1250-Sea-Burial-%E9%A2%98%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/08/12/Ural-1250-Sea-Burial-题解/</id>
    <published>2019-08-12T05:47:40.000Z</published>
    <updated>2019-08-31T15:02:04.431Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ural-1250-Sea-Burial-题解"><a href="#Ural-1250-Sea-Burial-题解" class="headerlink" title="Ural 1250 Sea Burial 题解"></a><a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1250" target="_blank" rel="noopener">Ural 1250 Sea Burial</a> 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n\times m$的地图，<code>.</code>为水，<code>#</code>为陆，地图的外部是水(地图被水包围)。水为八连通，陆为四联通。联通的水称为海，联通的陆称为岛。海内可能有岛，岛内可能有海。给定$x,y$求在包含$(x,y)$(保证$(x,y)$为水)的海里面有多少岛。</p><a id="more"></a><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行包含$m,n,y,x(1\le n,m\le 500,1\le x \le n,1\le y \le m)$</p><p>以下若干行为一个$n\times m$的地图</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑BFS或DFS(以下简称BFS)</p><ol><li>从$(x,y)$BFS，找出包含$(x,y)$的海。</li><li>从地图外部(水)BFS，找出在包含$(x,y)$的海的外面部分。</li><li>执行完前两步，就可以知道包含$(x,y)$的海里面的部分，数出包含$(x,y)$的海里面的部分有多少岛即可。</li></ol><p>Tip: 运用二进制可以使程序简便。记陆为$1$，岛为$2$。设我们需要的值为$x$，当前的值为$y$，只需判断$(x\&amp;y)$是否大于$0$即可。第1步时$x=2$，第2步时$x=3$(想一想，为什么，答案最后揭晓)，第3步时$x=1$。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><ol><li><p>BFS</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,X,Y,s[maxn][maxn],ans; <span class="comment">// '#'=&gt;1(01) '.'=&gt;2(10)</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> sx,<span class="keyword">int</span> sy,<span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[sx][sy]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; q;q.push(&#123;sx,sy&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front().fs,y=q.front().sc;q.pop();</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[x][y]==<span class="number">1</span>&amp;&amp;i&gt;<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cx=x+dx[i],cy=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(cx&gt;<span class="number">0</span>&amp;&amp;cx&lt;=n&amp;&amp;cy&gt;<span class="number">0</span>&amp;&amp;cy&lt;=m&amp;&amp;!vis[cx][cy]&amp;&amp;(s[cx][cy]&amp;status))</span><br><span class="line">&#123;</span><br><span class="line">vis[cx][cy]=<span class="number">1</span>;</span><br><span class="line">q.push(&#123;cx,cy&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;Y&gt;&gt;X;</span><br><span class="line">rep1(i,n) rep1(j,m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c;<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">s[i][j]=(c==<span class="string">'#'</span>?<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// step 1</span></span><br><span class="line">bfs(X,Y,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// step 2</span></span><br><span class="line">rep1(i,n)</span><br><span class="line">&#123;</span><br><span class="line">bfs(i,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">bfs(i,m+<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">rep1(j,m)</span><br><span class="line">&#123;</span><br><span class="line">bfs(<span class="number">0</span>,j,<span class="number">3</span>);</span><br><span class="line">bfs(n+<span class="number">1</span>,j,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 3</span></span><br><span class="line">rep1(i,n) rep1(j,m) <span class="keyword">if</span>(!vis[i][j]&amp;&amp;s[i][j]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">bfs(i,j,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure></li><li><p>DFS(与BFS十分类似)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #pragma GCC optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma G++ optimize(2)</span></span><br><span class="line"><span class="comment">// #pragma comment(linker,"/STACK:102400000,102400000")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="comment">// #include &lt;conio.h&gt;</span></span><br><span class="line"><span class="comment">// #include &lt;windows.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> ui;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span> fl;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> LD;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> (WIN32) || (WIN64) || (__WIN32) || (__WIN64) || (_WIN32) || (_WIN64) || (WINDOWS)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%I64d"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%I64u"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lld <span class="meta-string">"%lld"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> llu <span class="meta-string">"%llu"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ui(n) ((unsigned int)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL(n) ((long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull(n) ((unsigned long long)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fl(n) ((float)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ld(n) ((double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LD(n) ((long double)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> char(n) ((char)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Bool(n) ((bool)(n))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fixpoint(n) fixed&lt;&lt;setprecision(n)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1061109567</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> NINF=<span class="number">-1044266559</span>;</span><br><span class="line"><span class="keyword">const</span> LL LINF=<span class="number">4557430888798830399</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MOD (1000000007)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI (3.1415926535897932384626433832795028841971)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#define MB_LEN_MAX 5</span></span><br><span class="line"><span class="comment">#define SHRT_MIN (-32768)</span></span><br><span class="line"><span class="comment">#define SHRT_MAX 32767</span></span><br><span class="line"><span class="comment">#define USHRT_MAX 0xffffU</span></span><br><span class="line"><span class="comment">#define INT_MIN (-2147483647 - 1)</span></span><br><span class="line"><span class="comment">#define INT_MAX 2147483647</span></span><br><span class="line"><span class="comment">#define UINT_MAX 0xffffffffU</span></span><br><span class="line"><span class="comment">#define LONG_MIN (-2147483647L - 1)</span></span><br><span class="line"><span class="comment">#define LONG_MAX 2147483647L</span></span><br><span class="line"><span class="comment">#define ULONG_MAX 0xffffffffUL</span></span><br><span class="line"><span class="comment">#define LLONG_MAX 9223372036854775807ll</span></span><br><span class="line"><span class="comment">#define LLONG_MIN (-9223372036854775807ll - 1)</span></span><br><span class="line"><span class="comment">#define ULLONG_MAX 0xffffffffffffffffull</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MP make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MT make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> All(a) (a).begin(),(a).end()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pall(a) (a).rbegin(),(a).rend()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> log2(x) log(x)/log(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Log(x,y) log(x)/log(y)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SZ(a) ((int)(a).size())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,n) for(int i=0;i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep1(i,n) for(int i=1;i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa(i,a,n) for(int i=((int)(a));i&lt;((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repa1(i,a,n) for(int i=((int)(a));i&lt;=((int)(n));i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd(i,n) for(int i=((int)(n))-1;i&gt;=0;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repd1(i,n) for(int i=((int)(n));i&gt;=1;i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda(i,n,a) for(int i=((int)(n));i&gt;((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repda1(i,n,a) for(int i=((int)(n));i&gt;=((int)(a));i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FOR(i,a,n,step) for(int i=((int)(a));i&lt;((int)(n));i+=((int)(step)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repv(itr,v) for(__typeof((v).begin()) itr=(v).begin();itr!=(v).end();itr++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repV(i,v) for(auto i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> repE(i,v) for(auto &amp;i:v)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MS(x,y) memset(x,y,sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MC(x) MS(x,0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MINF(x) MS(x,63)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MCP(x,y) memcpy(x,y,sizeof(y))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sqr(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UN(v) sort(All(v)),v.erase(unique(All(v)),v.end())</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein(x) freopen(x,<span class="meta-string">"r"</span>,stdin)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout(x) freopen(x,<span class="meta-string">"w"</span>,stdout)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileio(x)\</span></span><br><span class="line">freopen(x<span class="string">".in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);\</span><br><span class="line">freopen(x<span class="string">".out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> filein2(filename,name) ifstream name(filename,ios::in)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fileout2(filename,name) ofstream name(filename,ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> file(filename,name) fstream name(filename,ios::in|ios::out)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Pause system(<span class="meta-string">"pause"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Cls system(<span class="meta-string">"cls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fs first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sc second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PC(x) putchar(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GC(x) x=getchar()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Endl PC(<span class="meta-string">'\n'</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SF scanf</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF printf</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X=<span class="number">0</span>,w=<span class="number">0</span>;<span class="keyword">char</span> ch=<span class="number">0</span>;<span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;w|=ch==<span class="string">'-'</span>;ch=getchar();&#125;<span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))X=(X&lt;&lt;<span class="number">3</span>)+(X&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line"><span class="keyword">return</span> w?-X:X;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Write</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;<span class="keyword">if</span>(x&gt;<span class="number">9</span>)Write(x/<span class="number">10</span>);<span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">powmod</span><span class="params">(LL a,LL b)</span></span>&#123;LL RES=<span class="number">1</span>;a%=MOD;assert(b&gt;=<span class="number">0</span>);<span class="keyword">for</span>(;b;b&gt;&gt;=<span class="number">1</span>)&#123;<span class="keyword">if</span>(b&amp;<span class="number">1</span>)RES=RES*a%MOD;a=a*a%MOD;&#125;<span class="keyword">return</span> RES%MOD;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> LL <span class="title">gcdll</span><span class="params">(LL a,LL b)</span></span>&#123;<span class="keyword">return</span> b?gcdll(b,a%b):a;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dx[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dy[]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">/************************************************************Begin************************************************************/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">510</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,X,Y,s[maxn][maxn],ans; <span class="comment">// '#'=&gt;1(01) '.'=&gt;2(10)</span></span><br><span class="line"><span class="keyword">bool</span> vis[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> status)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[x][y]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">rep(i,<span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[x][y]==<span class="number">1</span>&amp;&amp;i&gt;<span class="number">3</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cx=x+dx[i],cy=y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(cx&gt;<span class="number">0</span>&amp;&amp;cx&lt;=n&amp;&amp;cy&gt;<span class="number">0</span>&amp;&amp;cy&lt;=m&amp;&amp;!vis[cx][cy]&amp;&amp;(s[cx][cy]&amp;status)) dfs(cx,cy,status);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n&gt;&gt;Y&gt;&gt;X;</span><br><span class="line">rep1(i,n) rep1(j,m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c;<span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">s[i][j]=(c==<span class="string">'#'</span>?<span class="number">1</span>:<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// step 1</span></span><br><span class="line">dfs(X,Y,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// step 2</span></span><br><span class="line">rep1(i,n)</span><br><span class="line">&#123;</span><br><span class="line">dfs(i,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">dfs(i,m+<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">rep1(j,m)</span><br><span class="line">&#123;</span><br><span class="line">dfs(<span class="number">0</span>,j,<span class="number">3</span>);</span><br><span class="line">dfs(n+<span class="number">1</span>,j,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//step 3</span></span><br><span class="line">rep1(i,n) rep1(j,m) <span class="keyword">if</span>(!vis[i][j]&amp;&amp;s[i][j]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans++;</span><br><span class="line">dfs(i,j,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************************End**************************************************************/</span></span><br></pre></td></tr></table></figure></li></ol><p>Tip’s answer: 第2步是需要找出在包含$(x,y)$的海的外面部分，而外面部分不分海陆，$x=3$即$x=(11)_2$，这样$1\&amp;3$与$2\&amp;3$都大于$0$了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ural-1250-Sea-Burial-题解&quot;&gt;&lt;a href=&quot;#Ural-1250-Sea-Burial-题解&quot; class=&quot;headerlink&quot; title=&quot;Ural 1250 Sea Burial 题解&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://acm.timus.ru/problem.aspx?space=1&amp;amp;num=1250&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ural 1250 Sea Burial&lt;/a&gt; 题解&lt;/h2&gt;&lt;h3 id=&quot;题意&quot;&gt;&lt;a href=&quot;#题意&quot; class=&quot;headerlink&quot; title=&quot;题意&quot;&gt;&lt;/a&gt;题意&lt;/h3&gt;&lt;p&gt;给定一个$n\times m$的地图，&lt;code&gt;.&lt;/code&gt;为水，&lt;code&gt;#&lt;/code&gt;为陆，地图的外部是水(地图被水包围)。水为八连通，陆为四联通。联通的水称为海，联通的陆称为岛。海内可能有岛，岛内可能有海。给定$x,y$求在包含$(x,y)$(保证$(x,y)$为水)的海里面有多少岛。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="Ural" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/Ural/"/>
    
    
      <category term="BFS" scheme="http://yoursite.com/tags/BFS/"/>
    
      <category term="DFS" scheme="http://yoursite.com/tags/DFS/"/>
    
      <category term="图论" scheme="http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/08/12/hello-world/"/>
    <id>http://yoursite.com/2019/08/12/hello-world/</id>
    <published>2019-08-12T02:11:39.689Z</published>
    <updated>2019-09-02T13:46:21.306Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a><a href="https://sir-kay.github.io/" target="_blank" rel="noopener">Hello World</a></h1><p><strong>Happy Coding, Happy OI</strong></p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Happy Coding, Happy OI!"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\LaTeX</script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://sir-kay.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hello World&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Happy Coding, Happy OI&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
